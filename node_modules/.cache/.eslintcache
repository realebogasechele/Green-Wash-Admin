[{"/Users/onceknownriley/Dev/Ionic-React/admin/src/index.tsx":"1","/Users/onceknownriley/Dev/Ionic-React/admin/src/reportWebVitals.ts":"2","/Users/onceknownriley/Dev/Ionic-React/admin/src/serviceWorkerRegistration.ts":"3","/Users/onceknownriley/Dev/Ionic-React/admin/src/App.tsx":"4","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Menu/Menu.tsx":"5","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Profile/Profile.tsx":"6","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Dashboard/Dashboard.tsx":"7","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/SignIn/SignIn.tsx":"8","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/SignUp/SignUp.tsx":"9","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Router.tsx":"10","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Calendar/Calendar.tsx":"11","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Card/Card.tsx":"12","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/InputControls/InputControls.tsx":"13","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/MultiForm/MultiForm.tsx":"14","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/AgentForm.tsx":"15","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Add/Add.tsx":"16","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/ComplexForm.tsx":"17","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/PromotionForm.tsx":"18","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/PackageForm.tsx":"19","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Management/Management.tsx":"20","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/CardDetails/CardDetails.tsx":"21","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/AdminForm.tsx":"22","/Users/onceknownriley/Dev/Ionic-React/admin/src/mixins/Connection.ts":"23","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Regex/Regex.tsx":"24","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/index.tsx":"25","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/reportWebVitals.ts":"26","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/serviceWorkerRegistration.ts":"27","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/App.tsx":"28","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Router.tsx":"29","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Menu/Menu.tsx":"30","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/SignUp/SignUp.tsx":"31","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/SignIn/SignIn.tsx":"32","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Management/Management.tsx":"33","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Calendar/Calendar.tsx":"34","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/CardDetails/CardDetails.tsx":"35","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Add/Add.tsx":"36","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Profile/Profile.tsx":"37","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Dashboard/Dashboard.tsx":"38","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/mixins/Connection.ts":"39","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/MultiForm/MultiForm.tsx":"40","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Regex/Regex.tsx":"41","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx":"42","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Card/Card.tsx":"43","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/InputControls/InputControls.tsx":"44","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/ComplexForm.tsx":"45","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AgentForm.tsx":"46","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/PackageForm.tsx":"47","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/PromotionForm.tsx":"48","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/ForgotPassword.tsx":"49","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/NewPassword.tsx":"50","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/Otp.tsx":"51","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Card/CalCard.tsx":"52","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Clients/Clients.tsx":"53","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Card/ClientCard.tsx":"54","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Recover Account/Verify.tsx":"55","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Recover Account/RecoverOtp.tsx":"56"},{"size":796,"mtime":1630685610000,"results":"57","hashOfConfig":"58"},{"size":425,"mtime":1630685610000,"results":"59","hashOfConfig":"58"},{"size":5256,"mtime":1630685610000,"results":"60","hashOfConfig":"58"},{"size":1184,"mtime":1635271199416,"results":"61","hashOfConfig":"58"},{"size":2962,"mtime":1635550284760,"results":"62","hashOfConfig":"58"},{"size":1141,"mtime":1635764109854,"results":"63","hashOfConfig":"58"},{"size":707,"mtime":1635708754358,"results":"64","hashOfConfig":"58"},{"size":5155,"mtime":1635960237465,"results":"65","hashOfConfig":"58"},{"size":993,"mtime":1635708695382,"results":"66","hashOfConfig":"58"},{"size":1402,"mtime":1635271129744,"results":"67","hashOfConfig":"58"},{"size":591,"mtime":1635755874281,"results":"68","hashOfConfig":"58"},{"size":669,"mtime":1635708935734,"results":"69","hashOfConfig":"58"},{"size":757,"mtime":1634826352909,"results":"70","hashOfConfig":"58"},{"size":2086,"mtime":1635720606533,"results":"71","hashOfConfig":"58"},{"size":12078,"mtime":1635885289599,"results":"72","hashOfConfig":"58"},{"size":2954,"mtime":1635708623785,"results":"73","hashOfConfig":"58"},{"size":9872,"mtime":1635884585227,"results":"74","hashOfConfig":"58"},{"size":6526,"mtime":1635728072818,"results":"75","hashOfConfig":"58"},{"size":5437,"mtime":1635550658284,"results":"76","hashOfConfig":"58"},{"size":6642,"mtime":1635715225771,"results":"77","hashOfConfig":"58"},{"size":6127,"mtime":1635708764547,"results":"78","hashOfConfig":"58"},{"size":7561,"mtime":1635838199306,"results":"79","hashOfConfig":"58"},{"size":1939,"mtime":1635516893803,"results":"80","hashOfConfig":"58"},{"size":451,"mtime":1635766780243,"results":"81","hashOfConfig":"58"},{"size":796,"mtime":1630685610000,"results":"82","hashOfConfig":"83"},{"size":425,"mtime":1630685610000,"results":"84","hashOfConfig":"83"},{"size":5256,"mtime":1630685610000,"results":"85","hashOfConfig":"83"},{"size":1184,"mtime":1635271199416,"results":"86","hashOfConfig":"83"},{"size":2112,"mtime":1638035493026,"results":"87","hashOfConfig":"83"},{"size":3372,"mtime":1638211933653,"results":"88","hashOfConfig":"83"},{"size":990,"mtime":1637953907284,"results":"89","hashOfConfig":"83"},{"size":6653,"mtime":1638222470009,"results":"90","hashOfConfig":"83"},{"size":6949,"mtime":1637597301824,"results":"91","hashOfConfig":"83"},{"size":3920,"mtime":1638130353841,"results":"92","hashOfConfig":"83"},{"size":2846,"mtime":1637394463100,"results":"93","hashOfConfig":"83"},{"size":2944,"mtime":1636230888833,"results":"94","hashOfConfig":"83"},{"size":1504,"mtime":1637953690868,"results":"95","hashOfConfig":"83"},{"size":11970,"mtime":1638239291677,"results":"96","hashOfConfig":"83"},{"size":1939,"mtime":1636967736598,"results":"97","hashOfConfig":"83"},{"size":2044,"mtime":1636230767692,"results":"98","hashOfConfig":"83"},{"size":602,"mtime":1637693493502,"results":"99","hashOfConfig":"83"},{"size":12765,"mtime":1638238752579,"results":"100","hashOfConfig":"83"},{"size":669,"mtime":1635708935734,"results":"101","hashOfConfig":"83"},{"size":757,"mtime":1634826352909,"results":"102","hashOfConfig":"83"},{"size":12123,"mtime":1637952640354,"results":"103","hashOfConfig":"83"},{"size":15487,"mtime":1638238700622,"results":"104","hashOfConfig":"83"},{"size":7821,"mtime":1636289275508,"results":"105","hashOfConfig":"83"},{"size":7561,"mtime":1638350826326,"results":"106","hashOfConfig":"83"},{"size":6268,"mtime":1637150805732,"results":"107","hashOfConfig":"83"},{"size":5399,"mtime":1637852402988,"results":"108","hashOfConfig":"83"},{"size":5045,"mtime":1637151191220,"results":"109","hashOfConfig":"83"},{"size":1032,"mtime":1637609511082,"results":"110","hashOfConfig":"83"},{"size":3433,"mtime":1637311043606,"results":"111","hashOfConfig":"83"},{"size":3417,"mtime":1637410088941,"results":"112","hashOfConfig":"83"},{"size":4638,"mtime":1638036376190,"results":"113","hashOfConfig":"83"},{"size":4849,"mtime":1638040853757,"results":"114","hashOfConfig":"83"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"1xzhi39",{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"117"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"117"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"117"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"117"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"117"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"117"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"117"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"117"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"158","usedDeprecatedRules":"117"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"117"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"117"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"117"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"172","usedDeprecatedRules":"117"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},"sd88u6",{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"181"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"181"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"181"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"181"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"181"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"181"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"181"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"210","usedDeprecatedRules":"181"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"181"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"181"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"181"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"181"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"181"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"181"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"181"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"181"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"181"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"181"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"181"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"181"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"181"},"/Users/onceknownriley/Dev/Ionic-React/admin/src/index.tsx",[],["263","264"],"/Users/onceknownriley/Dev/Ionic-React/admin/src/reportWebVitals.ts",[],"/Users/onceknownriley/Dev/Ionic-React/admin/src/serviceWorkerRegistration.ts",[],"/Users/onceknownriley/Dev/Ionic-React/admin/src/App.tsx",["265","266"],"import { IonApp, IonRouterOutlet, IonSplitPane } from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport { Redirect, Route } from 'react-router-dom';\nimport Menu from './components/Menu/Menu';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\n\nimport Router from './pages/Router';\n\nconst App: React.FC = () => {\n  return (\n    <IonApp>\n      <IonReactRouter>\n      <IonSplitPane contentId=\"main\">\n        <Menu />\n          <Route path=\"/\" render={props => <Router {...props} />} />\n      </IonSplitPane>\n      </IonReactRouter>\n    </IonApp>\n  );\n};\n\nexport default App;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Menu/Menu.tsx",["267","268","269","270"],"import {\n  IonButton,\n  IonButtons,\n  IonContent,\n  IonFooter,\n  IonIcon,\n  IonImg,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonListHeader,\n  IonMenu,\n  IonMenuToggle,\n  IonNote,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\n\nimport TGWLogo from \"../../components/TGWLogo.png\";\n\nimport { useLocation } from \"react-router-dom\";\nimport {\n  businessOutline,\n  businessSharp,\n  calendarOutline,\n  calendarSharp,\n  gridOutline,\n  gridSharp,\n  home,\n  homeOutline,\n  peopleOutline,\n  peopleSharp,\n  personOutline,\n  personSharp,\n  starOutline,\n  starSharp,\n} from \"ionicons/icons\";\nimport \"./Menu.css\";\n\ninterface AppPage {\n  url: string;\n  iosIcon: string;\n  mdIcon: string;\n  title: string;\n}\ninterface Admin {\n  name: string;\n  surname: string;\n}\n\nconst admin: Admin = {\n  name: \"name\",\n  surname: \"surname\",\n};\n\nconst appPages: AppPage[] = [\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\",\n    iosIcon: homeOutline,\n    mdIcon: home,\n  },\n  {\n    title: \"Calendar\",\n    url: \"/calendar\",\n    iosIcon: calendarOutline,\n    mdIcon: calendarSharp,\n  },\n  {\n    title: \"Agent Management\",\n    url: \"/page/Agent/agent\",\n    iosIcon: peopleOutline,\n    mdIcon: peopleSharp,\n  },\n  {\n    title: \"Complex Management\",\n    url: \"/page/Complex/complex\",\n    iosIcon: businessOutline,\n    mdIcon: businessSharp,\n  },\n  {\n    title: \"Package Management\",\n    url: \"/page/Package/package\",\n    iosIcon: gridOutline,\n    mdIcon: gridSharp,\n  },\n  {\n    title: \"Promotion Management\",\n    url: \"/page/Promotion/promotion\",\n    iosIcon: starOutline,\n    mdIcon: starSharp,\n  },\n  {\n    title: \"Profile\",\n    url: \"/profile\",\n    iosIcon: personOutline,\n    mdIcon: personSharp,\n  },\n];\n\nconst Menu: React.FC = () => {\n  const location = useLocation();\n\n  return (\n    <IonMenu contentId=\"main\" type=\"overlay\">\n      <IonContent>\n        <IonList id=\"inbox-list\">\n          <IonImg src={TGWLogo}/>\n          <IonListHeader>The Green Wash Admin</IonListHeader>\n          {appPages.map((appPage, index) => {\n            return (\n              <IonMenuToggle key={index} autoHide={false}>\n                <IonItem\n                  className={\n                    location.pathname === appPage.url ? \"selected\" : \"\"\n                  }\n                  routerLink={appPage.url}\n                  routerDirection=\"none\"\n                  lines=\"none\"\n                  detail={false}\n                >\n                  <IonIcon\n                    slot=\"start\"\n                    ios={appPage.iosIcon}\n                    md={appPage.mdIcon}\n                  />\n                  <IonLabel>{appPage.title}</IonLabel>\n                </IonItem>\n              </IonMenuToggle>\n            );\n          })}\n        </IonList>\n        <IonFooter>\n          <IonToolbar>\n              <IonButton href=\"/signIn\" fill=\"solid\" shape=\"round\" color=\"primary\">Sign Out</IonButton>\n          </IonToolbar>\n        </IonFooter>\n      </IonContent>\n    </IonMenu>\n  );\n};\n\nexport default Menu;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Profile/Profile.tsx",["271","272","273","274","275","276"],"import {\n  IonBackButton,\n  IonButtons,\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport AdminForm from \"../../components/Forms/AdminForm\";\n\nconst Profile: React.FC = () => {\n\n  useIonViewWillEnter(()=>{\n  })\n\n  interface Admin{\n    adminId: string;\n    name: string;\n    surname: string;\n    cellNum: string;\n    password: string;\n  }\n\n  const admin: Admin =\n  {\n    adminId: \"\",\n    name:\"\",\n    surname:\"\",\n    cellNum:\"\",\n    password:\"\",\n  }\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/dashboard\"/>\n          </IonButtons>\n          <IonTitle>Profile</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent >\n        <AdminForm buttonName=\"Update\" content={admin}/>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Profile;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Dashboard/Dashboard.tsx",[],"/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/SignIn/SignIn.tsx",["277","278","279","280","281"],"import {\n  IonAlert,\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonFooter,\n  IonGrid,\n  IonHeader,\n  IonImg,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToast,\n  IonToolbar,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport TGWLogo from \"../../components/TGWLogo.png\";\nimport Connection from \"../../mixins/Connection\";\nimport {\n  validCellNum,\n  validPassword,\n} from \"../../components/Regex/Regex\";\n\nconst SignIn: React.FC = () => {\n  const path = useHistory();\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [cellNum, setCellNum] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const updateCellNum = (cellNum: any) => {\n    setCellNum(cellNum);\n  };\n  const updatePassword = (password: any) => {\n    setPassword(password);\n  };\n\n  const buttonHandler = () => {\n    validateForm();\n    if (isFormValid === true) {\n      let url = \"login\".concat(\"/\", cellNum, \"/\", password);\n      Connection.processGetRequest({}, url, (response: any) => {\n        mapResponse(response);\n      });\n    }\n  };\n\n  const validateForm = () => {\n    if (cellNum === \"\" || password === \"\") {\n      setShowLoader(false);\n      setIsFormValid(false);\n      setErrorMessage(\"Fields cannot be empty.\");\n      setShowError(true);\n    } else {\n      if (!validCellNum.test(cellNum)) {\n        setShowLoader(false);\n        setIsFormValid(false);\n        setErrorMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n      } else if (!validPassword.test(password)) {\n        setShowLoader(false);\n        setIsFormValid(false);\n        setErrorMessage(\n          \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n        );\n        setShowError(true);\n      } else {\n        setIsFormValid(true);\n      }\n    }\n  };\n\n  const mapResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n      setCellNum(\"\");\n      setPassword(\"\");\n    } else {\n      setSuccessMessage(\"Successfully Sign In!\");\n      setShowSuccess(true);\n    }\n  };\n\n  return (\n    <IonPage>\n      <IonContent>\n        <IonImg src={TGWLogo} alt={\"Logo.png\"} />\n        <IonToolbar>\n          <IonLoading\n            cssClass=\"my-custom-class\"\n            showBackdrop\n            isOpen={showLoader}\n            message={\"Please wait...\"}\n          />\n\n          <IonAlert\n            isOpen={showError}\n            onDidDismiss={() => setShowError(false)}\n            header={\"Error\"}\n            subHeader={\"Something went wrong.\"}\n            message={errorMessage}\n            buttons={[\"OK\"]}\n          />\n\n          <IonAlert\n            isOpen={showSuccess}\n            onDidDismiss={() => path.push(\"/dashboard\")}\n            header={\"Success\"}\n            subHeader={successMessage}\n            buttons={[\"OK\"]}\n          />\n          <IonGrid>\n            <IonRow>\n              <IonCol>\n                <IonToolbar>\n                  <IonTitle>Sign In</IonTitle>\n                </IonToolbar>\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <IonItem>\n                  <IonLabel position=\"floating\">Cell Number</IonLabel>\n                  <IonInput\n                    value={cellNum}\n                    onIonChange={(e) => updateCellNum(e.detail.value)}\n                  ></IonInput>\n                </IonItem>\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <IonItem>\n                  <IonLabel position=\"floating\">Password</IonLabel>\n                  <IonInput\n                    type=\"password\"\n                    value={password}\n                    onIonChange={(e) => updatePassword(e.detail.value)}\n                  ></IonInput>\n                </IonItem>\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <IonButton\n                  shape=\"round\"\n                  type=\"submit\"\n                  expand=\"block\"\n                  onClick={buttonHandler}\n                >\n                  SignIn\n                </IonButton>\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <p>\n                  <a href=\"/forgot\">Forgot password ?</a>\n                </p>\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <p>\n                  Don't have an account ? <a href=\"/signUp\">Sign Up.</a>\n                </p>\n              </IonCol>\n            </IonRow>\n          </IonGrid>\n        </IonToolbar>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default SignIn;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/SignUp/SignUp.tsx",["282","283","284","285","286","287","288","289"],"import {\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonImg,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\nimport React from \"react\";\nimport AdminForm from \"../../components/Forms/AdminForm\";\n\nconst SignUp: React.FC = () => {\n  interface Admin{\n    adminId: string;\n    name: string;\n    surname: string;\n    cellNum: string;\n    password: string;\n  }\n  const admin: Admin =(\n  {\n    adminId: \"\",\n    name:\"\",\n    surname:\"\",\n    cellNum:\"\",\n    password:\"\",\n  }\n  );\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonTitle>Sign Up</IonTitle>\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/signIn\" />\n          </IonButtons>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <AdminForm buttonName=\"Sign Up\" content={admin}/>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default SignUp;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Router.tsx",["290","291"],"import { Redirect, Route, RouteComponentProps } from \"react-router-dom\";\nimport { IonRouterOutlet, IonSplitPane } from \"@ionic/react\";\nimport React from \"react\";\n\nimport Dashboard from \"./Dashboard/Dashboard\";\nimport SignIn from \"./SignIn/SignIn\";\nimport SignUp from \"./SignUp/SignUp\";\nimport Calendar from \"./Calendar/Calendar\";\nimport Profile from \"./Profile/Profile\";\nimport Add from \"./Add/Add\"\nimport CardDetails from \"./CardDetails/CardDetails\";\nimport Management from \"./Management/Management\";\nimport Menu from \"../components/Menu/Menu\";\n\nconst Router: React.FC<RouteComponentProps> = ({ match }) => (\n  <IonRouterOutlet id=\"main\">\n    <Route path={match.url} exact={true}>\n      <Redirect to=\"/signIn\" />\n    </Route>\n    <Route path=\"/signIn\" exact={true}>\n      <SignIn />\n    </Route>\n    <Route path=\"/dashboard\" exact={true}>\n      <Dashboard />\n    </Route>\n    <Route path=\"/calendar\" exact={true}>\n      <Calendar />\n    </Route>\n    <Route path=\"/page/:name/:title\" exact={true}>\n      <Management />\n    </Route>\n    <Route path=\"/cardDetails/:name/:id/:type/:back\" exact={true}>\n      <CardDetails />\n      </Route>\n    <Route path=\"/add/:name/:title\" exact={true}>\n      <Add />\n    </Route>\n    <Route path=\"/profile\" exact={true}>\n      <Profile />\n    </Route>\n    <Route path=\"/signUp\" exact={true}>\n      <SignUp />\n    </Route>\n  </IonRouterOutlet>\n);\n\nexport default Router;","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Calendar/Calendar.tsx",["292"],"import {\n    IonBackButton,\n    IonButtons,\n    IonContent,\n    IonHeader,\n    IonMenuButton,\n    IonPage,\n    IonTitle,\n    IonToolbar,\n  } from \"@ionic/react\";\nimport React from \"react\";\n\nconst Calendar: React.FC = () => {\n    return(\n        <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonMenuButton />\n          </IonButtons>\n          <IonTitle>Calendar</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent fullscreen>\n        \n      </IonContent>\n    </IonPage>\n    );\n};\n\nexport default Calendar;","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Card/Card.tsx",["293"],"import {\n  IonCard,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n} from \"@ionic/react\";\nimport React, { ReactComponentElement } from \"react\";\n\nconst Card: React.FC<{type: \"agent\" | \"complex\" | \"package\" | \"promotion\", id: string, title: any, subtitle: any, reference: string}> = (props) => {\n    const url = \"/cardDetails/\";\n  return (\n    <IonCard color=\"secondary\" button={true} href={url.concat(props.title,\"/\",props.id,\"/\",props.type,\"/\",props.reference)}>\n      <IonCardHeader>\n        <IonCardTitle>{props.title}</IonCardTitle>\n        <IonCardSubtitle>{props.subtitle}</IonCardSubtitle>\n      </IonCardHeader>\n    </IonCard>\n  );\n};\n\nexport default Card;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/InputControls/InputControls.tsx",[],"/Users/onceknownriley/Dev/Ionic-React/admin/src/components/MultiForm/MultiForm.tsx",["294","295","296","297"],"import React from \"react\";\nimport AgentForm from \"../Forms/AgentForm\";\nimport ComplexForm from \"../Forms/ComplexForm\";\nimport PackageForm from \"../Forms/PackageForm\";\nimport PromotionForm from \"../Forms/PromotionForm\";\n\ninterface Pack {\n  packageId: string;\n  promotionId: string;\n  packageName: string;\n  minutes: number;\n  standardPrice: string;\n  suvPrice: string;\n  description: string;\n  onPromotion: boolean;\n}\n\ninterface Promotion {\n  promotionId: string;\n  promotionName: string;\n  packageName: string;\n  standardPrice: string;\n  suvPrice: string;\n  isEnabled: boolean;\n}\ninterface Complex {\n  complexId: string;\n  complexName: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  telephoneNum: string;\n  startTime: Date;\n  endTime: Date;\n  cellNum: string;\n  units: string[];\n  agents: string[];\n}\ninterface Agent {\n  agentId: string;\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst MultiForm: React.FC<{\n  buttonName: string;\n  type: \"agent\" | \"complex\" | \"package\" | \"promotion\";\n  isDisabled: boolean;\n  content: any;\n}> = (props) => {\n  let form;\n\n  if (props.type === \"agent\") {\n    form = (\n      <AgentForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        content={props.content}\n      />\n    );\n  } else if (props.type === \"complex\") {\n    form = (\n      <ComplexForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        content={props.content}\n      />\n    );\n  } else if (props.type === \"package\") {\n    form = (\n      <PackageForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        content={props.content}\n      />\n    );\n  } else {\n    form = (\n      <PromotionForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        content={props.content}\n      />\n    );\n  }\n\n  return <>{form}</>;\n};\n\nexport default MultiForm;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/AgentForm.tsx",["298","299"],"import {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\nimport { validCellNum, validId, validName, validPassword, validPostalCode } from \"../Regex/Regex\";\n\ninterface Agent {\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst AgentForm: React.FC<{ name: string; isDisabled: boolean; content: any }> =\n  (props) => {\n    const {\n      agentId,\n      complexName,\n      contractId,\n      name,\n      surname,\n      id,\n      cellNum,\n      street1,\n      street2,\n      city,\n      province,\n      postalCode,\n      password,\n    } = props.content;\n\n    const path = useHistory();\n\n    const [showLoader, setShowLoader] = useState(false);\n    const [showError, setShowError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [successMessage, setSuccessMessage] = useState(\"\");\n    const [showSuccess, setShowSuccess] = useState(false);\n    const [isFormValid, setIsFormValid] = useState(false);\n\n    const [enteredComplexName, setComplexName] = useState(complexName);\n    const [enteredName, setName] = useState(name);\n    const [enteredSurname, setSurname] = useState(surname);\n    const [enteredId, setId] = useState(id);\n    const [enteredCellNum, setCellNum] = useState(cellNum);\n    const [enteredStreet1, setStreet1] = useState(street1);\n    const [enteredStreet2, setStreet2] = useState(street2);\n    const [enteredCity, setCity] = useState(city);\n    const [enteredProvince, setProvince] = useState(province);\n    const [enteredPostalCode, setPostalCode] = useState(postalCode);\n    const [enteredPassword, setPassword] = useState(\"\");\n    const [enteredConfirm, setConfirmPassword] = useState(\"\");\n\n    const updateComplexName = (complexName: any) => setComplexName(complexName);\n    const updateName = (name: any) => setName(name);\n    const updateSurname = (surname: any) => setSurname(surname);\n    const updateId = (id: any) => setId(id);\n    const updateCellNum = (cellNum: any) => setCellNum(cellNum);\n    const updateStreet1 = (street1: any) => setStreet1(street1);\n    const updateStreet2 = (street2: any) => setStreet2(street2);\n    const updateCity = (city: any) => setCity(city);\n    const updateProvince = (province: any) => setProvince(province);\n    const updatePostalCode = (postalCode: any) => setPostalCode(postalCode);\n    const updatePassword = (password: any) => setPassword(password);\n    const updateConfirm = (cPassword: any) => setConfirmPassword(cPassword);\n\n    const buttonHandler = () => {\n      validateForm();\n      if(isFormValid){\n        if(props.name === \"Add\"){\n          let url = \"agent/add\";\n          var payload = {\n            agentId: agentId,\n            complexName: enteredComplexName,\n            contractId: contractId,\n            name: enteredName,\n            surname: enteredSurname,\n            id: enteredId,\n            cellNum: enteredCellNum,\n            street1: enteredStreet1,\n            street2: enteredStreet2,\n            city: enteredCity,\n            province: enteredProvince,\n            postalCode: enteredPostalCode,\n            password: enteredPassword \n          }\n          Connection.processPostRequest(payload, url, (response: any) => {\n            mapAddResponse(response);\n          });\n        }\n      }\n    };\n\n    const mapAddResponse = (response: any) => {\n      if (response.type === \"error\") {\n        setShowLoader(false);\n        setErrorMessage(response.data);\n        setShowError(true);\n      } else {\n        setShowLoader(false);\n        setSuccessMessage(\"Agent Details Captured!\");\n        setShowSuccess(true);\n      }\n    };\n\n    const validateForm = () => {\n      if (\n        enteredName === \"\" ||\n        enteredSurname === \"\" ||\n        enteredComplexName === \"\" ||\n        enteredId === \"\" ||\n        enteredCellNum === \"\" ||\n        enteredStreet1 === \"\" ||\n        enteredStreet2 === \"\" ||\n        enteredCity === \"\" ||\n        enteredProvince === \"\" ||\n        enteredPostalCode === \"\" ||\n        enteredPassword === \"\" ||\n        enteredConfirm === \"\"\n      ) {\n        setShowLoader(false);\n        setErrorMessage(\"Fields must not be empty.\");\n        setShowError(true);\n      }else if(enteredPassword !== enteredConfirm){\n        setShowLoader(false);\n        setErrorMessage(\n        \"Passwords do not match. Please ensure they are entered correctly!\"\n      );\n      setShowError(true);\n      setIsFormValid(false);\n      }\n      else{\n        if(!validName.test(enteredName)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Invalid Name.\");\n          setShowError(true);\n        }else if (!validName.test(enteredSurname)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Invalid Surname.\");\n          setShowError(true);\n        }else if (!validName.test(enteredComplexName)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Invalid Complex Name.\");\n          setShowError(true);\n        }else if(!validId.test(enteredId)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Invalid Id.\");\n          setShowError(true);\n        }else if(!validCellNum.test(enteredCellNum)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Invalid Cell Number\");\n          setShowError(true);\n        }else if(!validName.test(enteredCity)){\n          setShowLoader(false);\n          setErrorMessage(\"Invalid City\");\n          setShowError(true);\n        }\n        else if(!validName.test(enteredProvince)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Invalid Province.\");\n          setShowError(true);\n        }else if(!validPostalCode.test(enteredPostalCode)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Invalid Postal Code.\");\n          setShowError(true);\n        }else if(!validPassword.test(enteredPassword)){\n          setShowLoader(false);\n          setIsFormValid(false);\n          setErrorMessage(\"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\");\n          setShowError(true);\n        }\n        else{\n          setIsFormValid(true)\n        }\n      }\n    };\n\n    return (\n      <IonGrid>\n        <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => path.push(\"/page/Agent/agent\")}\n        header={\"Success\"}\n        subHeader={successMessage}\n        buttons={[\"OK\"]}\n      />\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Name</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredName}\n                onIonChange={(e) => updateName(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Surname</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredSurname}\n                onIonChange={(e) => updateSurname(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">ID</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredId}\n                onIonChange={(e) => updateId(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Cell Number</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredCellNum}\n                onIonChange={(e) => updateCellNum(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Street 1</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredStreet1}\n                onIonChange={(e) => updateStreet1(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Street 2</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredStreet2}\n                onIonChange={(e) => updateStreet2(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">City</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredCity}\n                onIonChange={(e) => updateCity(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Province</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredProvince}\n                onIonChange={(e) => updateProvince(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Postal code</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredPostalCode}\n                onIonChange={(e) => updatePostalCode(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Complex</IonLabel>\n              <IonInput\n                disabled={props.isDisabled}\n                value={enteredComplexName}\n                onIonChange={(e) => updateComplexName(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\">Password</IonLabel>\n              <IonInput\n                type=\"password\"\n                disabled={props.isDisabled}\n                value={enteredPassword}\n                onIonChange={(e) => updatePassword(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonItem>\n              <IonLabel position=\"floating\"> Confirm Password</IonLabel>\n              <IonInput\n                type=\"password\"\n                disabled={props.name === \"Add\" ? props.isDisabled : true}\n                value={enteredConfirm}\n                onIonChange={(e) => updateConfirm(e.detail.value)}\n              />\n            </IonItem>\n          </IonCol>\n        </IonRow>\n        <IonRow>\n          <IonCol>\n            <IonButton type=\"submit\" expand=\"block\" onClick={buttonHandler}>\n              {props.name}\n            </IonButton>\n          </IonCol>\n        </IonRow>\n      </IonGrid>\n    );\n  };\n\nexport default AgentForm;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Add/Add.tsx",["300","301","302","303"],"import React, { useState } from \"react\";\nimport {\n  IonBackButton,\n  IonButtons,\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\n\nimport MultiForm from \"../../components/MultiForm/MultiForm\";\nimport { useParams } from \"react-router\";\ninterface Pack {\n  packageId: string;\n  promotionId: string;\n  packageName: string;\n  minutes: number;\n  standardPrice: string;\n  suvPrice: string;\n  description: string;\n  onPromotion: boolean;\n}\n\ninterface Promotion {\n  promotionId: string;\n  promotionName: string;\n  packageName: string;\n  standardPrice: string;\n  suvPrice: string;\n  isEnabled: boolean;\n}\ninterface Complex {\n  complexId: string;\n  complexName: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  telephoneNum: string;\n  startTime: Date;\n  endTime: Date;\n  cellNum: string;\n  units: string[];\n  agents: string[];\n}\ninterface Agent {\n  agentId: string;\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst agent: Agent =\n  {\n    agentId: \"\",\n    complexName: \"\",\n    contractId: \"\",\n    name: \"\",\n    surname: \"\",\n    id: \"\",\n    cellNum: \"\",\n    street1: \"\",\n    street2: \"\",\n    city: \"\",\n    province: \"\",\n    postalCode: \"\",\n    password: \"\",\n  }\n\nconst complex: Complex =\n  {\n    complexId: \"\",\n    complexName: \"\",\n    street1: \"\",\n    street2: \"\",\n    city: \"\",\n    province: \"\",\n    postalCode: \"\",\n    telephoneNum: \"\",\n    startTime: new Date,\n    endTime: new Date,\n    cellNum: \"\",\n    units: [\"Default\"],\n    agents: [\"\"],\n  }\nconst pack: Pack = {\n    packageId: \"\",\n    promotionId: \"\",\n    packageName: \"\",\n    minutes: 0,\n    standardPrice: \"\",\n    suvPrice: \"\",\n    description: \"\",\n    onPromotion: false,\n  }\nconst promotion: Promotion =\n  {\n    promotionId: \"\",\n    promotionName: \"\",\n    packageName: \"\",\n    standardPrice: \"\",\n    suvPrice: \"\",\n    isEnabled: false,\n  }\n\nconst AddAgent: React.FC = () => {\n  const {name, title} = useParams<{name: string, title: \"agent\" | \"complex\" | \"package\" | \"promotion\" }>();\n  const backUrl = \"/page/\";\n  let content;\n  if (title === \"agent\"){\n    content = agent;\n  }\n  else if (title === \"complex\"){\n    content = complex;\n  }\n  else if (title === \"package\"){\n    content = agent;\n  }else{\n    content = promotion\n  }\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref={backUrl.concat(name).concat(\"/\").concat(title)} />\n          </IonButtons>\n          <IonTitle>Add {name}</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <MultiForm buttonName=\"Add\" type={title} isDisabled={false} content={content}/>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default AddAgent;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/ComplexForm.tsx",[],"/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/PromotionForm.tsx",["304","305"],"import {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n  IonToggle,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\n\nconst PromotionForm: React.FC<{\n  name: string;\n  isDisabled: boolean;\n  content: any;\n}> = (props) => {\n  var {\n    promotionId,\n    promotionName,\n    packageName,\n    standardPrice,\n    suvPrice,\n    isEnabled,\n  } = props.content;\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  const [enteredPromotionName, setPromotionName] = useState(promotionName);\n  const [enteredPackageName, setPackageName] = useState(packageName);\n  const [enteredStandardPrice, setStandardPriceName] = useState(standardPrice);\n  const [enteredSuvPrice, setSuvPrice] = useState(suvPrice);\n  const [enteredIsEnabled, setIsEnabled] = useState(isEnabled);\n\n  const updatePromotionName = (promotionName: any) => {\n    setPromotionName(promotionName);\n  };\n  const updatePackageName = (packageName: any) => {\n    setPackageName(packageName);\n  };\n  const updateStandardPrice = (standardPrice: any) => {\n    setStandardPriceName(standardPrice);\n  };\n  const updateSuvPrice = (suvPrice: any) => {\n    setSuvPrice(suvPrice);\n  };\n  const updateIsEnabled = (isEnabled: any) => {\n    setIsEnabled(isEnabled);\n  };\n\n  const path = useHistory();\n\n  const buttonHandler = () => {\n    setShowLoader(true);\n    if (props.name === \"Update\") {\n      let url = \"promotion/update\";\n      var payload = {\n        promotionId: promotionId,\n        promotionName: enteredPromotionName,\n        packageName: enteredPackageName,\n        standardPrice: enteredStandardPrice,\n        suvPrice: enteredSuvPrice,\n        isEnabled: enteredIsEnabled\n      };\n\n      Connection.processPostRequest(payload, url, (response: any) => {\n        mapUpdateResponse(response);\n      });\n    } else if (props.name === \"Delete\") {\n      let url = \"promotion/remove/\".concat(promotionId);\n\n      Connection.processDeleteRequest({}, url, (response: any) => {\n        mapDeleteResponse(response);\n      });\n    } else if (props.name === \"Add\") {\n      let url = \"promotion/add\";\n      var payload = {\n        promotionId: promotionId,\n        promotionName: enteredPromotionName,\n        packageName: enteredPackageName,\n        standardPrice: enteredStandardPrice,\n        suvPrice: enteredSuvPrice,\n        isEnabled: enteredIsEnabled\n      };\n      console.log(payload);\n      Connection.processPostRequest(payload, url, (response: any) => {\n        mapAddResponse(response);\n      });\n    }\n  };\n\n  const mapUpdateResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Promotion Updated!\")\n      setShowSuccess(true);\n    }\n  };\n  const mapDeleteResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n      console.log(\"error!\");\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Promotion Deleted!\")\n      setShowSuccess(true);\n    }\n  };\n  const mapAddResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n      console.log(\"error!\");\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Promotion Added!\")\n      setShowSuccess(true);\n    }\n  };\n\n  return (\n    <IonGrid>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => path.push(\"/page/Promotion/promotion\")}\n        header={\"Success\"}\n        subHeader={successMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Promotion Name</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredPromotionName}\n              onIonChange={(e) => updatePromotionName(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Package Name</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredPackageName}\n              onIonChange={(e) => updatePackageName(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Standard Price</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredStandardPrice}\n              onIonChange={(e) => updateStandardPrice(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Suv Price</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredSuvPrice}\n              onIonChange={(e) => updateSuvPrice(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel>Enabled</IonLabel>\n            <IonToggle\n              checked={enteredIsEnabled}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateIsEnabled(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton type=\"submit\" expand=\"block\" onClick={buttonHandler}>\n            {props.name}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default PromotionForm;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/PackageForm.tsx",["306","307","308","309","310","311","312"],"import {\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonRow,\n  IonTextarea,\n  IonToggle,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport Connection from \"../../mixins/Connection\";\n\nconst PackageForm: React.FC<{\n  name: string;\n  isDisabled: boolean;\n  content: any;\n}> = (props) => {\n  const {\n    packageId,\n    promotionId,\n    packageName,\n    minutes,\n    standardPrice,\n    suvPrice,\n    description,\n    onPromotion,\n  } = props.content;\n\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const updatePackageName = (packageName: any) => {\n    setEnteredPackageName(packageName);\n  };\n  const updateMinutes = (minutes: any) => {\n    setEnteredMinutes(minutes);\n  };\n  const updateStandardPrice = (standardPrice: any) => {\n    setEnteredStandardPrice(standardPrice);\n  };\n  const updateSuvPrice = (suvPrice: any) => {\n    setEnteredSuvPrice(suvPrice);\n  };\n  const updateDescription = (description: any) => {\n    setEnteredDescription(description);\n  };\n  const updateOnPromotion = (onPromotion: any) => {\n    setOnPromotion(onPromotion);\n  };\n\n  const [enteredPackageName, setEnteredPackageName] = useState(packageName);\n  const [enteredMinutes, setEnteredMinutes] = useState(minutes);\n  const [enteredStandardPrice, setEnteredStandardPrice] =\n    useState(standardPrice);\n  const [enteredSuvPrice, setEnteredSuvPrice] = useState(suvPrice);\n  const [enteredDescription, setEnteredDescription] = useState(description);\n  const [enteredOnPromotion, setOnPromotion] = useState(onPromotion);\n\n  function mapDeleteResponse(response: any) {\n    return (console.log(\"deleted\"));\n  }\n\n  const buttonHandler = () => {\n    if (props.name === \"Update\") {\n      var url = \"package/update\";\n      var pack = {\n        packageId: packageId,\n        promotionId: promotionId,\n        packageName: enteredPackageName,\n        minutes: enteredMinutes,\n        standardPrice: enteredStandardPrice,\n        suvPrice: enteredSuvPrice,\n        onPromotion: onPromotion,\n      };\n\n      Connection.processPostRequest(pack, url, (response: any) => {\n        mapResponse(response);\n      });\n    } else if (props.name === \"Delete\") {\n      url = \"package/remove/\".concat(packageId);\n\n      Connection.processDeleteRequest({}, url,(response: any)=>{\n        mapDeleteResponse(response);\n      })\n\n    } else {\n      url = \"package/add\";\n      var pack = {\n        packageId: packageId,\n        promotionId: promotionId,\n        packageName: enteredPackageName,\n        minutes: enteredMinutes,\n        standardPrice: enteredStandardPrice,\n        suvPrice: enteredSuvPrice,\n        onPromotion: onPromotion,\n      };\n      console.log(pack);\n      Connection.processPostRequest(pack, url, (response: any) => {\n        mapResponse(response);\n      });\n    }\n  };\n\n  const mapResponse = (response: any) => {};\n  return (\n    <IonGrid>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Package Name</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredPackageName}\n              onIonChange={(e) => updatePackageName(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Minutes</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredMinutes}\n              onIonChange={(e) => updateMinutes(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Standard Price</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredStandardPrice}\n              onIonChange={(e) => updateStandardPrice(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">SUV Price</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={enteredSuvPrice}\n              onIonChange={(e) => updateSuvPrice(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Description</IonLabel>\n            <IonTextarea\n              disabled={props.isDisabled}\n              value={enteredDescription}\n              onIonChange={(e) => updateDescription(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel>On Promotion</IonLabel>\n            <IonToggle\n              color={\"primary\"}\n              disabled={props.isDisabled}\n              checked={enteredOnPromotion}\n              onIonChange={(e) => updateOnPromotion(e.detail.checked)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton type=\"submit\" expand=\"block\" onClick={buttonHandler}>\n            {props.name}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default PackageForm;","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/Management/Management.tsx",["313","314","315"],"import {\n  IonAlert,\n  IonButtons,\n  IonContent,\n  IonFab,\n  IonFabButton,\n  IonHeader,\n  IonIcon,\n  IonLoading,\n  IonMenuButton,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonViewDidEnter,\n  useIonViewDidLeave,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport { add } from \"ionicons/icons\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport Card from \"../../components/Card/Card\";\nimport Connection from \"../../mixins/Connection\";\nimport \"./Page.css\";\n\nconst Management: React.FC = () => {\n  let cards;\n\n  const addUrl = \"/add/\";\n\n  const { name, title } =\n    useParams<{\n      name: string;\n      title: \"agent\" | \"complex\" | \"package\" | \"promotion\";\n    }>();\n\n  const [showLoader, setShowLoader] = useState(true);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [agents, setAgents] = useState([\n    {\n      agentId: \"\",\n      complexName: \"\",\n      contractId: \"\",\n      name: \"\",\n      surname: \"\",\n      id: \"\",\n      cellNum: \"\",\n      street1: \"\",\n      street2: \"\",\n      city: \"\",\n      province: \"\",\n      postalCode: \"\",\n      password: \"\",\n    },\n  ]);\n  const [complexes, setComplexes] = useState([\n    {\n      complexId: \"\",\n      complexName: \"\",\n      street1: \"\",\n      street2: \"\",\n      city: \"\",\n      province: \"\",\n      postalCode: \"\",\n      telephoneNum: \"\",\n      startTime: \"\",\n      endTime: \"\",\n      cellNum: \"\",\n      units: [],\n      agents: [],\n    },\n  ]);\n  const [packages, setPackages] = useState([\n    {\n      packageId: \"\",\n      promotionId: \"\",\n      packageName: \"\",\n      minutes: 0,\n      standardPrice: \"\",\n      suvPrice: \"\",\n      description: \"\",\n      onPromotion: false,\n    },\n  ]);\n  const [promotions, setPromotions] = useState([\n    {\n      promotionId: \"\",\n      promotionName: \"\",\n      packageName: \"\",\n      standardPrice: \"\",\n      suvPrice: \"\",\n      isEnabled: false,\n    },\n  ]);\n\n  useIonViewWillEnter( () => {\n      getAgents();\n      getComplexes();\n      getPackages();\n      getPromotions();\n  });\n\n  const getAgents = () => {\n    setShowLoader(true);\n    var url = \"agent/get/all\";\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapAgents(response);\n    });\n  };\n  const getComplexes = () => {\n    setShowLoader(true);\n    var url = \"complex/get/all\";\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapComplexes(response);\n    });\n  };\n  const getPackages = () => {\n    setShowLoader(true);\n    var url = \"package/get/all\";\n\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapPackages(response);\n    });\n  };\n  const getPromotions = () => {\n    setShowLoader(true);\n    var url = \"promotion/get/all\";\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapPromotions(response);\n    });\n  };\n\n  const mapPackages = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setPackages(response.data.data);\n    }\n  };\n  const mapAgents = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setAgents(response.data.data);\n    }\n  };\n\n  const mapComplexes = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setComplexes(response.data.data);\n    }\n  };\n  const mapPromotions = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setPromotions(response.data.data);\n    }\n  };\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonMenuButton />\n          </IonButtons>\n          <IonTitle>{name.concat(\" Management\")}</IonTitle>\n        </IonToolbar>\n        <IonAlert\n          isOpen={showError}\n          onDidDismiss={() => setShowError(false)}\n          header={'Error'}\n          subHeader={'Something went wrong.'}\n          message={errorMessage}\n          buttons={['OK']}\n        />\n      </IonHeader>\n\n      <IonContent fullscreen>\n      <IonLoading\n            cssClass='my-custom-class'\n            showBackdrop\n            isOpen={showLoader}\n            message={'Please wait...'}\n          />\n        {/* {cards} */}\n        { title === \"agent\" && agents.length !== 0 &&\n        agents.map((agent) => (\n          <Card\n            type={title}\n            id={agent.agentId}\n            key={agent.agentId}\n            title={agent.name.concat(\" \", agent.surname)}\n            subtitle={agent.complexName}\n            reference={name}\n          />\n        ))}\n      { title === \"agent\" && agents.length === 0 && \n        <h2>No Agents</h2>\n      }\n      { title === \"complex\" && complexes.length !== 0 &&\n        complexes.map((complex) => (\n          <Card\n            type={title}\n            id={complex.complexId}\n            key={complex.complexId}\n            title={complex.complexName}\n            subtitle={complex.street2}\n            reference={name}\n          />\n        ))}\n      { title === \"complex\" && complexes.length === 0 &&\n        <h2>No Complexes</h2>\n      }\n      { title === \"package\" && packages.length !== 0 &&\n      packages.map((pack) => (\n        <Card\n          type={title}\n          id={pack.packageId}\n          key={pack.packageId}\n          title={pack.packageName}\n          subtitle={pack.description}\n          reference={name}\n        />\n      ))}\n      { title === \"package\" && packages.length === 0 &&\n        <h2>No Packages</h2>\n      }\n      { title === \"promotion\" && promotions.length !== 0 &&\n        promotions.map((promotion) => (\n          <Card\n            type={title}\n            id={promotion.promotionId}\n            key={promotion.promotionId}\n            title={promotion.promotionName}\n            subtitle={promotion.packageName}\n            reference={name}\n          />\n        ))}\n      { title === \"promotion\" && promotions.length === 0 &&\n        <h2>No Promotions</h2>\n      }\n        <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n          <IonFabButton href={addUrl.concat(name, \"/\", title)}>\n            <IonIcon icon={add} />\n          </IonFabButton>\n        </IonFab>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Management;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/CardDetails/CardDetails.tsx",["316","317","318","319","320","321","322","323"],"import {\n  IonBackButton,\n  IonButtons,\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonViewDidEnter,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport MultiForm from \"../../components/MultiForm/MultiForm\";\nimport InputControls from \"../../components/InputControls/InputControls\";\nimport Connection from \"../../mixins/Connection\";\n\nvar result : Agent| Complex | Pack | Promotion;\ninterface Pack {\n  packageId: string;\n  promotionId: string;\n  packageName: string;\n  minutes: number;\n  standardPrice: string;\n  suvPrice: string;\n  description: string;\n  onPromotion: boolean;\n}\n\ninterface Promotion {\n  promotionId: string;\n  promotionName: string;\n  packageName: string;\n  standardPrice: string;\n  suvPrice: string;\n  isEnabled: boolean;\n}\ninterface Complex {\n  complexId: string;\n  complexName: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  telephoneNum: string;\n  startTime: Date;\n  endTime: Date;\n  cellNum: string;\n  units: string[];\n  agents: string[];\n}\ninterface Agent {\n  agentId: string;\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst CardDetails: React.FC = () => {\n\n  useIonViewDidEnter(()=>{\n    if(type===\"agent\"){\n      getAgent();\n    }else if(type===\"complex\"){\n      getComplex();\n    }else if(type===\"package\"){\n      getPackage();\n    }else{\n      getPromotion();\n    }\n  })\n  const [selectedSegment, setSelectedSegment] = useState<\"Update\" | \"Delete\">(\"Update\");\n  const [isDisabled, setIsDisabled] = useState<true | false>(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const { name, id ,type, back } = useParams<{\n    name: string;\n    id: string;\n    type: \"agent\" | \"complex\" | \"package\" | \"promotion\";\n    back: string;\n  }>();\n\n  const selectedSegmentHandler = (selectedValue: \"Update\" | \"Delete\") => {\n    setSelectedSegment(selectedValue);\n    if (selectedValue == \"Delete\") {\n      setIsDisabled(true);\n    } else {\n      setIsDisabled(false);\n    }\n  };\n  \n  let agent: Agent =\n    {\n      agentId: \"\",\n      complexName: \"\",\n      contractId: \"\",\n      name: \"\",\n      surname: \"\",\n      id: \"\",\n      cellNum: \"\",\n      street1: \"\",\n      street2: \"\",\n      city: \"\",\n      province: \"\",\n      postalCode: \"\",\n      password: \"\",\n    }\n\n  let complex: Complex =\n    {\n      complexId: \"\",\n      complexName: \"\",\n      street1: \"\",\n      street2: \"\",\n      city: \"\",\n      province: \"\",\n      postalCode: \"\",\n      telephoneNum: \"\",\n      startTime: new Date,\n      endTime: new Date,\n      cellNum: \"\",\n      units: [],\n      agents: [],\n    }\n  let pack: Pack =\n    {\n      packageId: \"\",\n      promotionId: \"\",\n      packageName: \"\",\n      minutes: 0,\n      standardPrice: \"\",\n      suvPrice: \"\",\n      description: \"\",\n      onPromotion: true,\n    }\n  let promotion: Promotion =\n    {\n      promotionId: \"\",\n      promotionName: \"\",\n      packageName: \"\",\n      standardPrice: \"\",\n      suvPrice: \"\",\n      isEnabled: false,\n    }\n\n  const getAgent = () => {\n    var url = \"agent/get/\".concat(id);\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapAgent(response);\n    });\n  };\n  const getComplex = () => {\n    var url = \"complex/get/\".concat(id);\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapComplex(response);\n    });\n  };\n  const getPackage = () => {\n    var url = \"package/get/\".concat(id);\n\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapPackage(response);\n    });\n  };\n  const getPromotion = () => {\n    var url = \"promotion/get/\".concat(id);\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapPromotion(response);\n    });\n  };\n\n  const mapPackage = (response: any) => {\n    if (response.type === \"error\") {\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      pack = response.data.data;\n      console.log(pack)\n    }\n  };\n  const mapAgent = (response: any) => {\n    if (response.type === \"error\") {\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      agent = response.data.data\n    }\n  };\n\n  const mapComplex = (response: any) => {\n    if (response.type === \"error\") {\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      complex = response.data.data;\n      console.log(complex)\n    }\n  };\n  const mapPromotion = (response: any) => {\n    if (response.type === \"error\") {\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      promotion = response.data.data;\n      console.log(promotion)\n    }\n  };\n\n  const url = \"/page/\";\n  /*Assign Content from API*/\n  \n  const getResult= () =>{\n    if (type === \"agent\") {\n      result = agent;\n      return result;\n      \n    } else if (type === \"complex\") {\n      result = complex;\n      console.log(result)\n      return result;\n      \n    } else if (type === \"package\") {\n      result = pack;\n      console.log(result)\n      return result;\n    } else {\n      result = promotion;\n      return result\n\n    }\n  }\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton\n              defaultHref={url.concat(back).concat(\"/\").concat(type)}\n            />\n          </IonButtons>\n          <IonTitle>{name}</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <InputControls\n          selectedValue={selectedSegment}\n          onSelectedValue={selectedSegmentHandler}\n        />\n        <>\n        {<MultiForm\n          buttonName={selectedSegment}\n          type={type}\n          isDisabled={isDisabled}\n          content={getResult()}\n        />}\n        </>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default CardDetails;\n","/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/AdminForm.tsx",[],"/Users/onceknownriley/Dev/Ionic-React/admin/src/mixins/Connection.ts",[],"/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Regex/Regex.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/index.tsx",[],["324","325"],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/reportWebVitals.ts",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/serviceWorkerRegistration.ts",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/App.tsx",["326","327"],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Router.tsx",["328"],"import { Redirect, Route, RouteComponentProps } from \"react-router-dom\";\nimport { IonRouterOutlet, IonSplitPane } from \"@ionic/react\";\nimport React from \"react\";\n\nimport Dashboard from \"./Dashboard/Dashboard\";\nimport SignIn from \"./SignIn/SignIn\";\nimport SignUp from \"./SignUp/SignUp\";\nimport Calendar from \"./Calendar/Calendar\";\nimport Profile from \"./Profile/Profile\";\nimport Add from \"./Add/Add\"\nimport CardDetails from \"./CardDetails/CardDetails\";\nimport Management from \"./Management/Management\";\nimport ForgotPassword from \"./ForgotPassword/ForgotPassword\";\nimport Otp from \"./ForgotPassword/Otp\";\nimport NewPassword from \"./ForgotPassword/NewPassword\";\nimport Clients from \"./Clients/Clients\";\nimport Verify from \"./Recover Account/Verify\";\nimport RecoverOtp from \"./Recover Account/RecoverOtp\";\n\nconst Router: React.FC<RouteComponentProps> = ({ match }) => (\n  <IonRouterOutlet id=\"main\">\n    <Route path={match.url} exact={true}>\n      <Redirect to=\"/signIn\" />\n    </Route>\n    <Route path=\"/signIn\" exact={true}>\n      <SignIn />\n    </Route>\n    <Route path=\"/dashboard\" exact={true}>\n      <Dashboard />\n    </Route>\n    <Route path=\"/calendar\" exact={true}>\n      <Calendar />\n    </Route>\n    <Route path=\"/page/:name/:title\" exact={true}>\n      <Management />\n    </Route>\n    <Route path=\"/cardDetails/:name/:id/:type/:back\" exact={true}>\n      <CardDetails />\n      </Route>\n    <Route path=\"/add/:name/:title\" exact={true}>\n      <Add />\n    </Route>\n    <Route path=\"/profile\" exact={true}>\n      <Profile />\n    </Route>\n    <Route path=\"/signUp\" exact={true}>\n      <SignUp />\n    </Route>\n    <Route path=\"/clients\" exact={true}>\n      <Clients />\n      </Route>\n    <Route path=\"/forgot\" exact={true}>\n      <ForgotPassword />\n    </Route>\n    <Route path=\"/forgot/otp\" exact={true}>\n      <Otp />\n    </Route>\n    <Route path=\"/newPassword\" exact={true}>\n      <NewPassword />\n    </Route>\n    <Route path=\"/recover\" exact={true}>\n      <Verify />\n    </Route>\n    <Route path=\"/recover/otp\" exact={true}>\n      <RecoverOtp />\n    </Route>\n  </IonRouterOutlet>\n);\n\nexport default Router;","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Menu/Menu.tsx",["329","330"],"import {\n  IonButton,\n  IonContent,\n  IonFooter,\n  IonIcon,\n  IonImg,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonListHeader,\n  IonMenu,\n  IonMenuToggle,\n  IonToolbar,\n} from \"@ionic/react\";\n\nimport TGWLogo from \"../../components/TGWLogo.png\";\n\nimport { useLocation } from \"react-router-dom\";\nimport { useHistory } from 'react-router';\nimport {\n  businessOutline,\n  businessSharp,\n  calendarOutline,\n  calendarSharp,\n  gridOutline,\n  gridSharp,\n  home,\n  homeOutline,\n  peopleCircle,\n  peopleCircleOutline,\n  peopleOutline,\n  peopleSharp,\n  personCircle,\n  personCircleOutline,\n  starOutline,\n  starSharp,\n} from \"ionicons/icons\";\nimport \"./Menu.css\";\nimport { Storage } from \"@capacitor/storage\";\n\ninterface AppPage {\n  url: string;\n  iosIcon: string;\n  mdIcon: string;\n  title: string;\n}\ninterface Admin {\n  name: string;\n  surname: string;\n}\n\nconst admin: Admin = {\n  name: \"name\",\n  surname: \"surname\",\n};\n\nconst appPages: AppPage[] = [\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\",\n    iosIcon: homeOutline,\n    mdIcon: home,\n  },\n  {\n    title: \"Calendar\",\n    url: \"/calendar\",\n    iosIcon: calendarOutline,\n    mdIcon: calendarSharp,\n  },\n  {\n    title: \"Agent Management\",\n    url: \"/page/Agent/agent\",\n    iosIcon: peopleOutline,\n    mdIcon: peopleSharp,\n  },\n  {\n    title: \"Complex Management\",\n    url: \"/page/Complex/complex\",\n    iosIcon: businessOutline,\n    mdIcon: businessSharp,\n  },\n  {\n    title: \"Package Management\",\n    url: \"/page/Package/package\",\n    iosIcon: gridOutline,\n    mdIcon: gridSharp,\n  },\n  {\n    title: \"Promotion Management\",\n    url: \"/page/Promotion/promotion\",\n    iosIcon: starOutline,\n    mdIcon: starSharp,\n  },\n  {\n    title: \"Client Management\",\n    url: \"/clients\",\n    iosIcon: peopleCircleOutline,\n    mdIcon: peopleCircle,\n  },\n  {\n    title: \"Profile\",\n    url: \"/profile\",\n    iosIcon: personCircleOutline,\n    mdIcon: personCircle,\n  },\n];\n\nconst Menu: React.FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n\n  const removeId = async() => {\n    await Storage.remove({ key: 'adminId' });\n  };\n\n  const signOut = () => {\n    removeId();\n  };\n  return (\n    <IonMenu contentId=\"main\" type=\"overlay\">\n      <IonContent>\n        <IonList id=\"inbox-list\">\n          <IonImg src={TGWLogo}/>\n          <IonListHeader>The Green Wash Admin</IonListHeader>\n          {appPages.map((appPage, index) => {\n            return (\n              <IonMenuToggle key={index} autoHide={false}>\n                <IonItem\n                  className={\n                    location.pathname === appPage.url ? \"selected\" : \"\"\n                  }\n                  href={appPage.url}\n                  routerDirection=\"none\"\n                  lines=\"none\"\n                  detail={false}\n                >\n                  <IonIcon\n                    slot=\"start\"\n                    ios={appPage.iosIcon}\n                    md={appPage.mdIcon}\n                  />\n                  <IonLabel>{appPage.title}</IonLabel>\n                </IonItem>\n              </IonMenuToggle>\n            );\n          })}\n        </IonList>\n        <IonFooter>\n          <IonToolbar>\n              <IonButton fill=\"solid\" shape=\"round\" color=\"primary\" href=\"/signIn\" onClick={() => signOut()}>Sign Out</IonButton>\n          </IonToolbar>\n        </IonFooter>\n      </IonContent>\n    </IonMenu>\n  );\n};\n\nexport default Menu;\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/SignUp/SignUp.tsx",["331","332","333","334","335","336","337","338"],"import {\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonImg,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\nimport React from \"react\";\nimport AdminForm from \"../../components/Forms/AdminForm\";\n\nconst SignUp: React.FC = () => {\n  interface Admin{\n    adminId: string;\n    name: string;\n    surname: string;\n    cellNum: string;\n    password: string;\n  }\n  const admin: Admin =(\n  {\n    adminId: \"\",\n    name:\"\",\n    surname:\"\",\n    cellNum:\"\",\n    password:\"\",\n  }\n  );\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonTitle>Sign Up</IonTitle>\n          <IonButtons slot=\"start\">\n            <IonBackButton />\n          </IonButtons>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <AdminForm buttonName=\"Sign Up\" isDisabled={false} content={admin}/>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default SignUp;\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/SignIn/SignIn.tsx",["339","340","341","342","343","344","345","346","347","348"],"/** @jsxImportSource theme-ui */\nimport {\n  IonAlert,\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCol,\n  IonContent,\n  IonFooter,\n  IonGrid,\n  IonHeader,\n  IonImg,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonPage,\n  IonRow,\n  IonSelect,\n  IonSelectOption,\n  IonTitle,\n  IonToast,\n  IonToolbar,\n  useIonViewWillEnter,\n  useIonViewWillLeave,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport TGWLogo from \"../../components/TGWLogo.png\";\nimport Connection from \"../../mixins/Connection\";\nimport {\n  validCellNum,\n  validEmail,\n  validPassword,\n} from \"../../components/Regex/Regex\";\nimport { Storage } from \"@capacitor/storage\";\nimport { App } from \"@capacitor/app\";\n\nconst SignIn: React.FC = () => {\n  useIonViewWillEnter(()=>{\n    App.addListener('backButton', (e) => {\n    if (e.canGoBack === true || e.canGoBack === false){\n      setShowOptions(true)\n    }\n  }\n  )\n  })\n  const history = useHistory();\n\n  let valid: boolean = false;\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showOptions, setShowOptions] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const updateUsername = (cellNum: any) => {\n    setUsername(cellNum);\n  };\n  const updatePassword = (password: any) => {\n    setPassword(password);\n  };\n\n  const setAdminId = async (data: any) => {\n    await Storage.set({\n      key: \"adminId\",\n      value: data,\n    });\n  };\n\n  const buttonHandler = () => {\n    setShowLoader(true);\n      if (username === \"\" || password === \"\") {\n        setShowLoader(false);\n        valid = false;\n        setErrorMessage(\"Fields cannot be empty.\");\n        setShowError(true);\n      } else if (!validCellNum.test(username) && !validEmail.test(username)) {\n        setShowLoader(false);\n        valid = false;\n        setErrorMessage(\"Invalid Cell Number or Email.\");\n        setShowError(true);\n      } else if (!validPassword.test(password)) {\n        setShowLoader(false);\n        valid = false;\n        setErrorMessage(\n          \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n        );\n        setShowError(true);\n      } else {\n        let url = \"login/\".concat(username, \"/\", password);\n        Connection.processGetRequest({}, url, (response: any) =>\n          mapResponse(response)\n        );\n      }\n    }; \n\n  const mapResponse = async (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n      setUsername(\"\")\n      setPassword(\"\");\n    } else {\n      setShowLoader(false);\n      await setAdminId(response.data.data);\n      setSuccessMessage(\"Successfully Sign In!\");\n      setShowSuccess(true);\n    }\n  };\n\n  return (\n    <IonPage>\n      <IonContent>\n        <IonImg src={TGWLogo} alt={\"Logo.png\"} sx={styles.img} />\n        <IonToolbar>\n          <IonLoading\n            cssClass=\"my-custom-class\"\n            showBackdrop\n            isOpen={showLoader}\n            message={\"Please wait...\"}\n          />\n\n          <IonAlert\n            isOpen={showError}\n            onDidDismiss={() => setShowError(false)}\n            header={\"Error\"}\n            subHeader={\"Something went wrong.\"}\n            message={errorMessage}\n            buttons={[\"OK\"]}\n          />\n\n          <IonAlert\n            isOpen={showSuccess}\n            onDidDismiss={() => {\n              history.push(\"/dashboard\");\n            }}\n            header={\"Success\"}\n            subHeader={successMessage}\n            buttons={[\"OK\"]}\n          />\n      <IonAlert\n          isOpen={showOptions}\n          onDidDismiss={() => setShowOptions(false)}\n          header={'Confirm'}\n          message={'Are you sure you want to exit ?'}\n          buttons={[\n            {\n              text: \"No\",\n              cssClass: \"secondary\",\n            },\n            {\n              text: \"Yes\",\n              handler: () => {\n                setShowOptions(false);\n                App.exitApp();\n              },\n            },\n          ]}\n        />\n          <IonCard sx={{ mt: \"8vh\" }}>\n            <IonGrid>\n              <IonRow>\n                <IonCol offset=\"4\">\n                  <IonToolbar>\n                    <IonTitle size=\"large\">Sign In</IonTitle>\n                  </IonToolbar>\n                </IonCol>\n              </IonRow>\n              <IonRow>\n                <IonCol>\n                  <IonItem>\n                    <IonLabel position=\"floating\">Cell Number/Email</IonLabel>\n                    <IonInput\n                      value={username}\n                      onIonChange={(e) => updateUsername(e.detail.value)}\n                    ></IonInput>\n                  </IonItem>\n                </IonCol>\n              </IonRow>\n              <IonRow>\n                <IonCol>\n                  <IonItem>\n                    <IonLabel position=\"floating\">Password</IonLabel>\n                    <IonInput\n                      type=\"password\"\n                      value={password}\n                      onIonChange={(e) => updatePassword(e.detail.value)}\n                    ></IonInput>\n                  </IonItem>\n                </IonCol>\n              </IonRow>\n              <IonRow>\n                <IonCol>\n                  <IonButton\n                    shape=\"round\"\n                    type=\"submit\"\n                    expand=\"block\"\n                    onClick={() => buttonHandler()}\n                  >\n                    SignIn\n                  </IonButton>\n                </IonCol>\n              </IonRow>\n              <IonRow>\n                <IonCol style={{textAlign: \"center\"}}>\n                  <p>\n                    <a href=\"/forgot\">Forgot password ?</a> or <a href=\"/recover\">Recover account ?</a>\n                  </p>\n                </IonCol>\n              </IonRow>\n              <IonRow>\n                <IonCol style={{textAlign: \"center\"}}>\n                  Don't have an account ? <a href=\"/signUp\">Sign Up.</a>\n                </IonCol>\n              </IonRow>\n            </IonGrid>\n          </IonCard>\n        </IonToolbar>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default SignIn;\n\nconst styles = {\n  img: {\n    pt: \"6vh\",\n    pl: \"4vh\",\n    pr: \"4vh\",\n  },\n  select: {\n    mt: \"15px\",\n    border: \"1px solid grey\",\n  },\n};\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Management/Management.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Calendar/Calendar.tsx",["349","350"],"/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport {\n  IonAlert,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonDatetime,\n  IonGrid,\n  IonHeader,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonMenuButton,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport CalCard from \"../../components/Card/CalCard\";\nimport Connection from \"../../mixins/Connection\";\n\nconst Calendar: React.FC = () => {\n  useIonViewWillEnter(() =>{\n    setShowLoader(true);\n    getBookings(time);\n  })\n  const history = useHistory();\n\n  const getBookings = (time: any) => {\n    setShowLoader(true);\n    let url = 'booking/get/'.concat(time);\n    Connection.processGetRequest({}, url, (response: any) => mapResponse(response))\n  };\n\n const mapResponse = (response: any) => {\n   if(response.type === 'error'){\n     setShowLoader(false);\n     setMessage(response.data);\n     setShowError(true);\n   }else{\n     setBookings(response.data.data);\n     setShowLoader(false)\n   }\n }\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const [time, setTime] = useState(new Date().toISOString());\n  const [bookings, setBookings] = useState([\n    {\n      bookingId: \"\",\n      clientName: \"Test\",\n      clientSurname: \"Test\",\n      complexName: \"Test\",\n      packageName: \"Test\",\n      price: \"57\",\n      startTime: new Date().toDateString(),\n      endTime: new Date().toDateString(),\n    },\n  ]);\n  const updateTime = (currentTime: any) => {\n    setTime(currentTime);\n    getBookings(currentTime);\n  };\n  return (\n    <IonPage>\n      <IonLoading\n            cssClass='my-custom-class'\n            showBackdrop\n            isOpen={showLoader}\n            message={'Please wait...'}\n          />\n          <IonAlert\n          isOpen={showError}\n          onDidDismiss={() => setShowError(false)}\n          header={'Error'}\n          subHeader={'Something went wrong.'}\n          message={message}\n          buttons={['OK']}\n        />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonMenuButton />\n          </IonButtons>\n          <IonTitle>Calendar</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonItem>\n                <IonLabel>Select a date</IonLabel>\n                <IonDatetime\n                  min=\"2021\"\n                  value={time}\n                  onIonChange={(e) => updateTime(e.detail.value)}\n                />\n              </IonItem>\n            </IonCol>\n          </IonRow>\n          {bookings.length !== 0 &&\n            bookings.map((booking) => (\n              <CalCard\n                key={booking.bookingId}\n                name={booking.clientName}\n                surname={booking.clientSurname}\n                complexName={booking.complexName}\n                packageName={booking.packageName}\n                price={booking.price}\n                startTime={new Date(booking.startTime).toDateString() + \" \" + new Date(booking.startTime).toLocaleTimeString()}\n                endTime={new Date(booking.endTime).toDateString() + \" \" + new Date(booking.endTime).toLocaleTimeString()}\n              />\n            ))}\n\n          {bookings.length === 0 && (\n            <IonRow sx={styles.row}>\n              <IonCol>\n                <h1 sx={styles.heading}>No Bookings </h1>\n              </IonCol>\n            </IonRow>\n          )}\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Calendar;\n\nconst styles = {\n  heading: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    color: \"grey\",\n  },\n  row: {\n    mt:'30vh',\n    borderRadius: '8px',\n    opacity: '0.5'\n  },\n};\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/CardDetails/CardDetails.tsx",["351","352","353","354","355","356","357","358","359","360","361","362","363","364"],"import {\n  IonBackButton,\n  IonButtons,\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonViewDidEnter,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport MultiForm from \"../../components/MultiForm/MultiForm\";\nimport InputControls from \"../../components/InputControls/InputControls\";\nimport Connection from \"../../mixins/Connection\";\n\ninterface Pack {\n  packageId: string;\n  promotionId: string;\n  packageName: string;\n  minutes: number;\n  standardPrice: string;\n  suvPrice: string;\n  description: string;\n  onPromotion: boolean;\n}\n\ninterface Promotion {\n  promotionId: string;\n  promotionName: string;\n  packageName: string;\n  standardPrice: string;\n  suvPrice: string;\n  isEnabled: boolean;\n}\ninterface Complex {\n  complexId: string;\n  complexName: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  telephoneNum: string;\n  startTime: Date;\n  endTime: Date;\n  cellNum: string;\n  units: string[];\n  agents: string[];\n}\ninterface Agent {\n  agentId: string;\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst CardDetails: React.FC = () => {\n\n  const [selectedSegment, setSelectedSegment] = useState<\"Update\" | \"Delete\">(\"Update\");\n  const [isDisabled, setIsDisabled] = useState<boolean>(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const { name, id ,type, back } = useParams<{\n    name: string;\n    id: string;\n    type: \"agent\" | \"complex\" | \"package\" | \"promotion\";\n    back: string;\n  }>();\n\n  const selectedSegmentHandler = (selectedValue: \"Update\" | \"Delete\") => {\n    setSelectedSegment(selectedValue);\n    if (selectedValue == \"Delete\") {\n      setIsDisabled(true);\n    } else {\n      setIsDisabled(false);\n    }\n  };\n\n  const url = \"/page/\";\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton\n              defaultHref={url.concat(back).concat(\"/\").concat(type)}\n            />\n          </IonButtons>\n          <IonTitle>{name}</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <InputControls\n          selectedValue={selectedSegment}\n          onSelectedValue={selectedSegmentHandler}\n        />\n        <>\n        {<MultiForm\n          buttonName={selectedSegment}\n          type={type}\n          isDisabled={isDisabled}\n          id={id}\n        />}\n        </>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default CardDetails;\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Add/Add.tsx",["365","366","367","368","369"],"import React, { useState } from \"react\";\nimport {\n  IonBackButton,\n  IonButtons,\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\n\nimport MultiForm from \"../../components/MultiForm/MultiForm\";\nimport { useParams } from \"react-router\";\ninterface Pack {\n  packageId: string;\n  promotionId: string;\n  packageName: string;\n  minutes: number;\n  standardPrice: string;\n  suvPrice: string;\n  description: string;\n  onPromotion: boolean;\n}\n\ninterface Promotion {\n  promotionId: string;\n  promotionName: string;\n  packageName: string;\n  standardPrice: string;\n  suvPrice: string;\n  isEnabled: boolean;\n}\ninterface Complex {\n  complexId: string;\n  complexName: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  telephoneNum: string;\n  startTime: Date;\n  endTime: Date;\n  cellNum: string;\n  units: string[];\n  agents: string[];\n}\ninterface Agent {\n  agentId: string;\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst agent: Agent =\n  {\n    agentId: \"\",\n    complexName: \"\",\n    contractId: \"\",\n    name: \"\",\n    surname: \"\",\n    id: \"\",\n    cellNum: \"\",\n    street1: \"\",\n    street2: \"\",\n    city: \"\",\n    province: \"\",\n    postalCode: \"\",\n    password: \"\",\n  }\n\nconst complex: Complex =\n  {\n    complexId: \"\",\n    complexName: \"\",\n    street1: \"\",\n    street2: \"\",\n    city: \"\",\n    province: \"\",\n    postalCode: \"\",\n    telephoneNum: \"\",\n    startTime: new Date,\n    endTime: new Date,\n    cellNum: \"\",\n    units: [\"Default\"],\n    agents: [\"\"],\n  }\nconst pack: Pack = {\n    packageId: \"\",\n    promotionId: \"\",\n    packageName: \"\",\n    minutes: 0,\n    standardPrice: \"\",\n    suvPrice: \"\",\n    description: \"\",\n    onPromotion: false,\n  }\nconst promotion: Promotion =\n  {\n    promotionId: \"\",\n    promotionName: \"\",\n    packageName: \"\",\n    standardPrice: \"\",\n    suvPrice: \"\",\n    isEnabled: false,\n  }\n\nconst AddAgent: React.FC = () => {\n  const {name, title} = useParams<{name: string, title: \"agent\" | \"complex\" | \"package\" | \"promotion\" }>();\n  const backUrl = \"/page/\";\n  let content;\n  if (title === \"agent\"){\n    content = agent;\n  }\n  else if (title === \"complex\"){\n    content = complex;\n  }\n  else if (title === \"package\"){\n    content = agent;\n  }else{\n    content = promotion\n  }\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref={backUrl.concat(name).concat(\"/\").concat(title)} />\n          </IonButtons>\n          <IonTitle>Add {name}</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <MultiForm buttonName=\"Add\" type={title} isDisabled={false} id={\"\"}/>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default AddAgent;\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Profile/Profile.tsx",["370","371"],"import {\n  IonBackButton,\n  IonButtons,\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport AdminForm from \"../../components/Forms/AdminForm\";\nimport InputControls from \"../../components/InputControls/InputControls\";\n\nconst Profile: React.FC = () => {\n  interface Admin{\n    adminId: string;\n    name: string;\n    surname: string;\n    cellNum: string;\n    password: string;\n  }\n\n  const admin: Admin =\n  {\n    adminId: \"\",\n    name:\"\",\n    surname:\"\",\n    cellNum:\"\",\n    password:\"\",\n  }\n  const [isDisabled, setIsDisabled] = useState<boolean>(false);\n  const [selectedSegment, setSelectedSegment] = useState<\"Update\" | \"Delete\">(\"Update\");\n  const selectedSegmentHandler = (selectedValue: \"Update\" | \"Delete\") => {\n    setSelectedSegment(selectedValue);\n    if (selectedValue == \"Delete\") {\n      setIsDisabled(true);\n    } else {\n      setIsDisabled(false);\n    }\n  };\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton />\n          </IonButtons>\n          <IonTitle>Profile</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent >\n      <InputControls selectedValue={selectedSegment} onSelectedValue={selectedSegmentHandler}/>\n        <AdminForm buttonName={selectedSegment} content={admin} isDisabled={isDisabled}/>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Profile;\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Dashboard/Dashboard.tsx",["372","373","374","375","376","377","378","379","380","381","382"],"/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport {\n  IonAlert,\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonLoading,\n  IonMenuButton,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { Bar, Doughnut, Pie } from \"react-chartjs-2\";\nimport { useHistory } from \"react-router\";\nimport { App } from '@capacitor/app';\nimport Connection from \"../../mixins/Connection\";\n\ninterface ResponseObject {\n  name: string;\n  value: number;\n}\n\ninterface Admin {\n  adminId: string;\n  name: string;\n  surname: string;\n  cellNum: string;\n  email: string;\n  password: string;\n}\n\nconst Dashboard: React.FC = () => {\n  const history = useHistory();\n  useIonViewWillEnter(() => {\n    setShowLoader(true);\n    getAdminId();\n    getPast7Days();\n    getPopularity();\n    getPopulation();\n    getMostBookings();\n    getTotalEarnings();\n    getTypeOBookings();\n    setShowLoader(false);\n  });\n  const getMostBookings = () => {\n    let url = \"query/complexMostBookings\";\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapMostBookings(response);\n    });\n  };\n  let past7Days: ResponseObject[];\n  let packPopularity: ResponseObject[];\n  let clientPopulation: ResponseObject[];\n\n  const getAdminId = async () => {\n    const id: any = await Storage.get({ key: \"adminId\" });\n    const adminId = id.value;\n    if(adminId !== null){\n      getAdminDetails(adminId);\n    }else{\n      setShowLeave(true);\n    }\n  };\n\n  const [admin, setAdmin] = useState({\n    adminId: \"\",\n    name: \"\",\n    surname: \"\",\n    cellNum: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [past7DaysValues, setPast7DaysValues] = useState<number[]>([]);\n  const [packPopularityNames, setPackPopularityNames] = useState<string[]>([]);\n  const [packPopularityValues, setPackPopularityValues] = useState<number[]>(\n    []\n  );\n  const [complexNames, setComplexNames] = useState<string[]>([]);\n  const [clients, setClients] = useState<number[]>([]);\n  const [mostBookings, setMostBookings] = useState(\"\");\n  const [totalEarnings, setTotalEarnings] = useState([]);\n  const [typeOfBookings, setTypeOfBookings] = useState([]);\n\n  const [showLoader, setShowLoader] = useState(true);\n  const [showLeave, setShowLeave] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [callDone, setCallDone] = useState(false);\n\n  const getAdminDetails = (adminId: string) => {\n    let url = \"get/\".concat(adminId);\n    Connection.processGetRequest({}, url, (response: any) =>\n      mapAdminDetails(response)\n    );\n  };\n\n  const getPast7Days = () => {\n    let url = \"query/past7Days\";\n    Connection.processGetRequest({}, url, (response: any) => \n      mapPast7Days(response)\n    );\n  };\n\n  const getPopularity = () => {\n    let url = \"query/packagePopularity\";\n    Connection.processGetRequest({}, url, (response: any) =>\n      mapPopularity(response)\n    );\n  };\n\n  const getPopulation = () => {\n    let url = \"query/clientPopulation\";\n    Connection.processGetRequest({}, url, (response: any) => \n      mapPopulation(response)\n    );\n  };\n  const getTypeOBookings = () => {\n    let url = 'query/typeOfBookingsToday';\n    Connection.processGetRequest({}, url, (response: any) => mapBookingResponse(response))\n  };\n  const getTotalEarnings = () => {\n    let url = 'query/totalEarningsToday';\n    Connection.processGetRequest({}, url, (response: any) => mapEarningResponse(response))\n  };\n  const mapEarningResponse = (response: any) => {\n    if(response.type === 'error'){\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    }else{\n      setTotalEarnings(response.data.data);\n\n    }\n  };\n  const mapBookingResponse = (response: any) => {\n    if(response.type === 'error'){\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    }else{\n      setTypeOfBookings(response.data.data);\n    }\n  };\n\n  const mapPopulation = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      clientPopulation = response.data.data;\n      for (let i = 0; i < clientPopulation.length; i++) {\n        complexNames.push(clientPopulation[i].name);\n        clients.push(clientPopulation[i].value);\n      }\n    }\n  };\n\n  const mapPopularity = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      packPopularity = response.data.data;\n      for (let i = 0; i < packPopularity.length; i++) {\n        packPopularityNames.push(packPopularity[i].name);\n        packPopularityValues.push(packPopularity[i].value);\n      }\n    }\n  };\n\n  const mapAdminDetails = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setAdmin(response.data.data);\n      setCallDone(true);\n    }\n  };\n\n  const mapPast7Days = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      past7Days = response.data.data;\n      for (let i = 0; i <= past7Days.length - 2; i++) {\n        past7DaysValues.push(past7Days[i].value);\n      }\n      setPast7DaysValues(past7DaysValues);\n    }\n  };\n\n  const mapMostBookings = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(true);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setMostBookings(response.data.data);\n    }\n  };\n\n  const state = {\n    labels: [\n      \"Today\",\n      \"Yesterday\",\n      \"2 Days Ago\",\n      \"3 Days Ago\",\n      \"4 Days Ago\",\n      \"5 Days Ago\",\n      \"6 Days Ago\",\n      \"7 Days Ago\",\n    ],\n    datasets: [\n      {\n        label: \"Bookings\",\n        backgroundColor: \"rgba(91, 159, 78)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        data: past7DaysValues,\n      },\n    ],\n  };\n  const state2 = {\n    labels: packPopularityNames,\n    datasets: [\n      {\n        label: \"Packages\",\n        data: packPopularityValues,\n        backgroundColor: [\n          \"rgb(93,204,90)\",\n          \"rgb(132,227,151)\",\n          \"rgb(87,205,90)\",\n          \"rgb(55,66,65)\",\n          \"rgb(10,168,76)\"\n        ],\n        hoverOffset: 4,\n      },\n    ],\n  };\n\n  const state3 = {\n    labels: complexNames,\n    datasets: [\n      {\n        label: \"Clients\",\n        data: clients,\n        backgroundColor: [\n          \"rgb(93,204,90)\",\n          \"rgb(132,227,151)\",\n          \"rgb(87,205,90)\",\n          \"rgb(55,66,65)\",\n          \"rgb(10,168,76)\"\n        ],\n        hoverOffset: 4,\n      },\n    ],\n  };\n  const state4 = {\n    labels: [\"Cash\", \"Card\"],\n    datasets: [\n      {\n        data: typeOfBookings,\n        backgroundColor: [\n          \"rgb(93,204,90)\",\n          \"rgb(132,227,151)\",\n          \"rgb(87,205,90)\",\n          \"rgb(55,66,65)\",\n          \"rgb(10,168,76)\"\n        ],\n        hoverOffset: 4,\n      },\n    ],\n  };\n  const state5 = {\n    labels: [\"Cash\", \"Card\"],\n    datasets: [\n      {\n        data: totalEarnings,\n        backgroundColor: [\n          \"rgb(93,204,90)\",\n          \"rgb(132,227,151)\",\n          \"rgb(87,205,90)\",\n          \"rgb(55,66,65)\",\n          \"rgb(10,168,76)\"\n        ],\n        hoverOffset: 4,\n      },\n    ],\n  };\n\n  const removeUnit = () => {\n    let temp: string[] = [];\n    for (let i = 0; i < packPopularityNames.length; i++) {\n      if (packPopularityNames[i] !== \"Default\") {\n        temp.push(packPopularityNames[i]);\n      }\n      setPackPopularityNames(temp);\n    }\n  };\n\n  return (\n    <IonPage>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonMenuButton />\n          </IonButtons>\n          <IonTitle>Dashboard</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent fullscreen>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonTitle color=\"medium\">\n                {callDone === true\n                  ? \"Welcome \" + admin.name + \" \" + admin.surname + \" !\"\n                  : \"\"}\n              </IonTitle>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonCard>\n                <IonCardHeader>\n                  <IonCardTitle color=\"medium\">\n                    Bookings for the past 7 days\n                  </IonCardTitle>\n                  <IonCardContent>\n                    {packPopularityNames.length !== 0 &&\n                      packPopularityValues.length !== 0 && <Bar data={state} />}\n                  </IonCardContent>\n                </IonCardHeader>\n              </IonCard>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonCard>\n                <IonCardHeader>\n                  <IonRow>\n                    <IonCol size=\"8\">\n                      <IonCardTitle color=\"medium\">\n                        Package Popularity\n                      </IonCardTitle>\n                    </IonCol>\n                  </IonRow>\n                </IonCardHeader>\n                <IonCardContent>\n                  {packPopularityNames.length !== 0 &&\n                    packPopularityValues.length !== 0 && <Pie data={state2} />}\n                </IonCardContent>\n              </IonCard>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonCard>\n                <IonCardHeader>\n                  <IonRow>\n                    <IonCol size=\"8\">\n                      <IonCardTitle color=\"medium\">\n                        Client Population\n                      </IonCardTitle>\n                    </IonCol>\n                  </IonRow>\n                </IonCardHeader>\n                <IonCardContent>\n                  {packPopularityNames.length !== 0 &&\n                    packPopularityValues.length !== 0 && (\n                      <Doughnut data={state3} />\n                    )}\n                </IonCardContent>\n              </IonCard>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonCard>\n                <IonCardHeader>\n                  <IonCardTitle color=\"medium\">\n                    Type of Bookings Today\n                  </IonCardTitle>\n                </IonCardHeader>\n                <IonCardContent>\n                  {packPopularityNames.length !== 0 &&\n                    packPopularityValues.length !== 0 && (\n                      <Doughnut data={state4} />\n                    )}\n                </IonCardContent>\n              </IonCard>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonCard>\n                <IonCardHeader>\n                  <IonCardTitle color=\"medium\">\n                    Total Earnings For Today\n                  </IonCardTitle>\n                </IonCardHeader>\n                <IonCardContent>\n                  {packPopularityNames.length !== 0 &&\n                    packPopularityValues.length !== 0 && (\n                      <Doughnut data={state4} />\n                    )}\n                </IonCardContent>\n              </IonCard>\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Dashboard;","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/mixins/Connection.ts",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/MultiForm/MultiForm.tsx",["383","384","385","386"],"import React from \"react\";\nimport AgentForm from \"../Forms/AgentForm\";\nimport ComplexForm from \"../Forms/ComplexForm\";\nimport PackageForm from \"../Forms/PackageForm\";\nimport PromotionForm from \"../Forms/PromotionForm\";\n\ninterface Pack {\n  packageId: string;\n  promotionId: string;\n  packageName: string;\n  minutes: number;\n  standardPrice: string;\n  suvPrice: string;\n  description: string;\n  onPromotion: boolean;\n}\n\ninterface Promotion {\n  promotionId: string;\n  promotionName: string;\n  packageName: string;\n  standardPrice: string;\n  suvPrice: string;\n  isEnabled: boolean;\n}\ninterface Complex {\n  complexId: string;\n  complexName: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  telephoneNum: string;\n  startTime: Date;\n  endTime: Date;\n  cellNum: string;\n  units: string[];\n  agents: string[];\n}\ninterface Agent {\n  agentId: string;\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst MultiForm: React.FC<{\n  buttonName: string;\n  type: \"agent\" | \"complex\" | \"package\" | \"promotion\";\n  isDisabled: boolean;\n  id: string;\n}> = (props) => {\n  let form;\n\n  if (props.type === \"agent\") {\n    form = (\n      <AgentForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        id={props.id}\n      />\n    );\n  } else if (props.type === \"complex\") {\n    form = (\n      <ComplexForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        id={props.id}\n      />\n    );\n  } else if (props.type === \"package\") {\n    form = (\n      <PackageForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        id={props.id}\n      />\n    );\n  } else {\n    form = (\n      <PromotionForm\n        name={props.buttonName}\n        isDisabled={props.isDisabled}\n        id={props.id}\n      />\n    );\n  }\n\n  return <>{form}</>;\n};\n\nexport default MultiForm;\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Regex/Regex.tsx",["387","388","389","390","391","392","393","394","395","396","397","398","399"],"export const validEmail = new RegExp(\n  \"^(([^<>()\\[\\]\\\\.,;:\\s@]+(\\.[^<>()\\[\\]\\\\.,;:\\s@]+)*)|(.+))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$\"\n);\nexport const validPassword = new RegExp(\n  \"^(?=.*[A-Za-z0-9])[A-Za-z0-9@$!%*#?&^_-]{8,17}$\"\n);\n\nexport const validId = new RegExp(\n  \"^[0-9]{13}$\"\n);\n\nexport const validCellNum = new RegExp(\"^(0)[0-9]{9}$\");\n\nexport const validName = new RegExp(\n  \"^[A-Z][a-z]*(([,.] |[ '-])[A-Za-z][a-z]*)*(.?)$\"\n);\n\nexport const validPostalCode = new RegExp(\"^[0-9]{4}$\");\n\nexport const validOtp = new RegExp(\"^[0-9]{6}$\");","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx",["400","401"],"/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\n\nimport { validCellNum, validPassword, validName } from \"../Regex/Regex\";\n\ninterface Admin {\n  adminId: string;\n  name: string;\n  surname: string;\n  cellNum: string;\n  password: string;\n}\n\nconst AdminForm: React.FC<{\n  buttonName: string;\n  content: Admin;\n  isDisabled: boolean;\n}> = (props) => {\n  const { adminId, name, surname, cellNum, password } = props.content;\n\n  useIonViewWillEnter(() => {\n    if (props.buttonName === \"Update\") {\n      setShowLoader(true);\n      getAdminId();\n    }\n  });\n\n  let admin = {\n    adminId: \"\",\n    name: \"\",\n    surname: \"\",\n    cellNum: \"\",\n    email: \"\",\n    password: \"\",\n  };\n\n  const getAdminId = async () => {\n    const id: any = await Storage.get({ key: \"adminId\" });\n    const adminId = id.value;\n\n    getAdminDetails(adminId);\n  };\n\n  const getAdminDetails = (adminId: string) => {\n    let url = \"get/\".concat(adminId);\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapResponse(response);\n    });\n  };\n  const updateAdmin = (response: any) => {\n    admin = response;\n  };\n\n  const mapResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      updateAdmin(response.data.data);\n      updateName(admin.name);\n      updateSurname(admin.surname);\n      updateCellNum(admin.cellNum);\n      updateEmail(admin.email);\n      setShowLoader(false);\n    }\n  };\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showSuccessUpdate, setShowSuccessUpdate] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showInfo, setShowInfo] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredEmail, setEnteredEmail] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const updateName = (name: any) => {\n    setEnteredName(name);\n  };\n  const updateSurname = (surname: any) => {\n    setEnteredSurname(surname);\n  };\n  const updateCellNum = (cellNum: any) => {\n    setEnteredCellNum(cellNum);\n  };\n  const updateEmail = (email: any) => {\n    setEnteredEmail(email);\n  };\n  const updatePassword = (password: any) => {\n    setEnteredPassword(password);\n  };\n  const updateConfirmPassword = (confirmPassword: any) => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  const getId = async () => {\n    const id: any = await Storage.get({ key: \"adminId\" });\n    const adminId = id.value;\n    if (props.buttonName === \"Update\") {\n      finishUpdate(adminId);\n    } else {\n      finishDelete(adminId);\n    }\n  };\n  const finishUpdate = (adminId: any) => {\n    let url = \"update\";\n    let payload = {\n      adminId: adminId,\n      name: enteredName,\n      surname: enteredSurname,\n      cellNum: enteredCellNum,\n      email: enteredEmail,\n      password: enteredPassword,\n    };\n    Connection.processPostRequest(payload, url, (response: any) => {\n      mapUpdateResponse(response);\n    });\n  };\n\n  const finishDelete = (adminId: any) => {\n    let url = \"remove/\".concat(adminId);\n    Connection.processPostRequest({}, url, (response: any) =>\n      mapDeleteResponse(response)\n    );\n  };\n\n  const removeId = async() => {\n    await Storage.remove({key: \"adminId\"});\n  }\n\n  let path = useHistory();\n\n  const buttonHandler = () => {\n    if (props.buttonName === \"Update\") {\n      setShowLoader(true);\n      validateForm();\n    } \n    else if(props.buttonName === 'Delete'){\n      setMessage('By selecting delete you will lose all of your personal data as well as your account ?')\n      setShowInfo(true);\n    }else{\n      setShowLoader(true);\n      validateForm();\n    }\n  };\n\n  const mapUpdateResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setMessage(\"Profile Updated!\");\n      setShowSuccessUpdate(true);\n    }\n  };\n\n  const mapPostResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setMessage(\"Details Successfully Captured!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const mapDeleteResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      removeId();\n      setMessage(\"Profile Deleted!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const validateForm = () => {\n    if (\n      enteredName === \"\" ||\n      enteredSurname === \"\" ||\n      enteredCellNum === \"\" ||\n      enteredPassword === \"\"\n    ) {\n      setShowLoader(false);\n      setMessage(\"Fields must not be left empty.\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else if (enteredPassword !== confirmPassword) {\n      setShowLoader(false);\n      setMessage(\n        \"Passwords do not match. Please ensure they are entered correctly!\"\n      );\n      setShowError(true);\n      setIsFormValid(false);\n    } else {\n      if (!validName.test(enteredName)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Name.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validName.test(enteredSurname)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Surname.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validCellNum.test(enteredCellNum)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validPassword.test(enteredPassword)) {\n        setShowLoader(false);\n        setMessage(\n          \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n        );\n        setShowError(true);\n        setIsFormValid(false);\n      } else {\n        if(props.buttonName === \"Update\"){\n          getId();\n        }else{\n          let url = \"signUp\";\n          let payload = {\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword,\n        };\n\n        Connection.processPostRequest(payload, url, (response: any) => {\n          mapPostResponse(response);\n        });\n        }\n      }\n    }\n  };\n\n  return (\n    <IonGrid>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => path.push(\"/signIn\")}\n        header={\"Success\"}\n        subHeader={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showSuccessUpdate}\n        onDidDismiss={() => path.push(\"/dashboard\")}\n        header={\"Success\"}\n        subHeader={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showInfo}\n        onDidDismiss={() => setShowInfo(false)}\n        cssClass=\"my-custom-class\"\n        header={\"Warning\"}\n        message={message}\n        buttons={[\n          {\n            text: \"Cancel\",\n          },\n          {\n            text: \"Continue\",\n            handler: () => {\n              setShowInfo(false);\n              setMessage('Are you sure ?');\n              setShowConfirm(true);\n            },\n          },\n        ]}\n      />\n      <IonAlert\n        isOpen={showConfirm}\n        onDidDismiss={() => setShowConfirm(false)}\n        cssClass=\"my-custom-class\"\n        header={\"Confirm\"}\n        message={message}\n        buttons={[\n          {\n            text: \"No\",\n            role: \"cancel\",\n            cssClass: \"secondary\",\n            handler: () => {},\n          },\n          {\n            text: \"Yes, I'm sure\",\n            handler: () => {\n              getId();\n              setShowConfirm(false);\n            },\n          },\n        ]}\n      />\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Name <span sx={styles.arterisk.name}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredName}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateName(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Surname <span sx={styles.arterisk.surname}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredSurname}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateSurname(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Cell Number <span sx={styles.arterisk.cellNum}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredCellNum}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateCellNum(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Email <span sx={styles.arterisk.email}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredEmail}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateEmail(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Password <span sx={styles.arterisk.pass}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"password\"\n              value={enteredPassword}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updatePassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Confrim Password <span sx={styles.arterisk.confirm}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"password\"\n              value={confirmPassword}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateConfirmPassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton\n            shape=\"round\"\n            type=\"submit\"\n            expand=\"block\"\n            onClick={buttonHandler}\n          >\n            {props.buttonName}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default AdminForm;\nvar display = {\n  name: \"inline-block\",\n  surname: \"inline-block\",\n  cellNum: \"inline-block\",\n  email: \"inline-block\",\n  pass: \"inline-block\",\n  confirm: \"inline-block\",\n};\n\nconst styles = {\n  arterisk: {\n    name: {\n      display: display.name,\n      color: \"red\",\n    },\n    surname: {\n      display: display.surname,\n      color: \"red\",\n    },\n    cellNum: {\n      display: display.cellNum,\n      color: \"red\",\n    },\n    email: {\n      display: display.email,\n      color: \"red\",\n    },\n    pass: {\n      display: display.pass,\n      color: \"red\",\n    },\n    confirm: {\n      display: display.confirm,\n      color: \"red\",\n    },\n  },\n  item: {\n    mb: \"2vh\",\n  },\n};\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Card/Card.tsx",["402"],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/InputControls/InputControls.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/ComplexForm.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AgentForm.tsx",["403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],"import {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n  useIonViewDidEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\nimport {\n  validCellNum,\n  validId,\n  validName,\n  validPassword,\n  validPostalCode,\n} from \"../Regex/Regex\";\n\ninterface Agent {\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst AgentForm: React.FC<{ name: string; isDisabled: boolean; id: string }> = (\n  props\n) => {\n  useIonViewDidEnter(() => {\n    if (props.name === \"Update\") {\n      setShowLoader(true);\n      getAgent();\n    }\n  });\n\n  const path = useHistory();\n  const [agent, setAgent] = useState({\n    agentId: \"\",\n    complexName: \"\",\n    contractId: \"\",\n    name: \"\",\n    surname: \"\",\n    id: \"\",\n    cellNum: \"\",\n    street1: \"\",\n    street2: \"\",\n    city: \"\",\n    province: \"\",\n    postalCode: \"\",\n    password: \"\",\n  });\n\n  const getAgent = () => {\n    var url = \"agent/get/\".concat(props.id);\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapAgent(response);\n    });\n  };\n\n  const getComplexes = () => {\n    let url = \"complex/get/all/names\";\n    Connection.processGetRequest({}, url, (response: any) =>\n      mapComplexResponse(response)\n    );\n  };\n\n  const mapComplexResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setErrorMessage(response.data.data);\n      setShowError(true);\n    } else {\n      setComplexes(response.data.data);\n    }\n  };\n\n  const mapAgent = (response: any) => {\n    if (response.type === \"error\") {\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      updateAgent(response.data.data);\n    }\n  };\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [complexes, setComplexes] = useState([]);\n\n  const [enteredComplexName, setComplexName] = useState(agent.complexName);\n  const [enteredName, setName] = useState(agent.name);\n  const [enteredSurname, setSurname] = useState(agent.surname);\n  const [enteredId, setId] = useState(agent.id);\n  const [enteredCellNum, setCellNum] = useState(agent.cellNum);\n  const [enteredStreet1, setStreet1] = useState(agent.street1);\n  const [enteredStreet2, setStreet2] = useState(agent.street2);\n  const [enteredCity, setCity] = useState(agent.city);\n  const [enteredProvince, setProvince] = useState(agent.province);\n  const [enteredPostalCode, setPostalCode] = useState(agent.postalCode);\n  const [enteredPassword, setPassword] = useState(\"\");\n  const [enteredConfirm, setConfirmPassword] = useState(\"\");\n\n  const updateAgent = (agent: any) => setAgent(agent);\n\n  const updateComplexName = (complexName: any) =>\n    (agent.complexName = complexName);\n  const updateName = (name: any) => (agent.name = name);\n  const updateSurname = (surname: any) => (agent.surname = surname);\n  const updateId = (id: any) => (agent.id = id);\n  const updateCellNum = (cellNum: any) => (agent.cellNum = cellNum);\n  const updateStreet1 = (street1: any) => (agent.street1 = street1);\n  const updateStreet2 = (street2: any) => (agent.street2 = street2);\n  const updateCity = (city: any) => (agent.city = city);\n  const updateProvince = (province: any) => (agent.province = province);\n  const updatePostalCode = (postalCode: any) => (agent.postalCode = postalCode);\n  const updatePassword = (password: any) => (agent.password = password);\n  const updateConfirm = (cPassword: any) => setConfirmPassword(cPassword);\n\n  const buttonHandler = () => {\n    if (props.name === \"Add\") {\n      validateForm();\n    } else if (props.name === \"Delete\") {\n      let url = \"agent/remove/\".concat(agent.agentId);\n      Connection.processPostRequest({}, url, (response: any) => {\n        mapDeleteResponse(response);\n      })\n    } else {\n      setShowLoader(true);\n      validateForm();\n    }\n  };\n\n  const mapDeleteResponse = (response: any) => {\n    if(response.type === 'error'){\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    }else{\n        setShowLoader(false);\n        setSuccessMessage(\"Agent Removed\");\n        setShowSuccess(true);\n    }\n  };\n\n  const mapResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      if (props.name === \"Update\") {\n        setShowLoader(false);\n        setSuccessMessage(\"Agent Details Updated!\");\n        setShowSuccess(true);\n      } else {\n        setShowLoader(false);\n        setSuccessMessage(\"Agent Details Captured!\");\n        setShowSuccess(true);\n      }\n    }\n  };\n\n  const validateForm = () => {\n    if (\n      agent.name === \"\" ||\n      agent.surname === \"\" ||\n      agent.complexName === \"\" ||\n      agent.id === \"\" ||\n      agent.cellNum === \"\" ||\n      agent.street1 === \"\" ||\n      agent.street2 === \"\" ||\n      agent.city === \"\" ||\n      agent.province === \"\" ||\n      agent.postalCode === \"\" ||\n      agent.password === \"\"\n    ) {\n      setShowLoader(false);\n      setErrorMessage(\"Fields must not be empty.\");\n      setShowError(true);\n    } \n    else if (props.name === \"Add\") {\n      if (agent.password !== enteredConfirm) {\n        setShowLoader(false);\n        setErrorMessage(\n          \"Passwords do not match. Please ensure they are entered correctly!\"\n        );\n        setShowError(true);\n      } else {\n        if (!validName.test(agent.name)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Name.\");\n          setShowError(true);\n        } else if (!validName.test(agent.surname)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Surname.\");\n          setShowError(true);\n        } else if (!validName.test(agent.complexName)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Complex Name.\");\n          setShowError(true);\n        } else if (!validId.test(agent.id)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Id.\");\n          setShowError(true);\n        } else if (!validCellNum.test(agent.cellNum)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Cell Number\");\n          setShowError(true);\n        } else if (!validName.test(agent.city)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid City\");\n          setShowError(true);\n        } else if (!validName.test(agent.province)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Province.\");\n          setShowError(true);\n        } else if (!validPostalCode.test(agent.postalCode)) {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Postal Code.\");\n          setShowError(true);\n        } else if (!validPassword.test(agent.password)) {\n          setShowLoader(false);\n          setErrorMessage(\n            \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n          );\n          setShowError(true);\n        } else {\n          let url = \"agent/add\";\n          var request = {\n            complexName: agent.complexName,\n            contractId: \"\",\n            name: agent.name,\n            surname: agent.surname,\n            id: agent.id,\n            cellNum: agent.cellNum,\n            street1: agent.street1,\n            street2: agent.street2,\n            city: agent.city,\n            province: agent.province,\n            postalCode: agent.postalCode,\n            password: agent.password,\n          };\n          Connection.processPostRequest(request, url, (response: any) => {\n            mapResponse(response);\n          });\n        }\n      }\n    } else {\n      if (!validName.test(agent.name)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Name.\");\n        setShowError(true);\n      } else if (!validName.test(agent.surname)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Surname.\");\n        setShowError(true);\n      } else if (!validName.test(agent.complexName)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Complex Name.\");\n        setShowError(true);\n      } else if (!validId.test(agent.id)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Id.\");\n        setShowError(true);\n      } else if (!validCellNum.test(agent.cellNum)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Cell Number\");\n        setShowError(true);\n      } else if (!validName.test(agent.city)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid City\");\n        setShowError(true);\n      } else if (!validName.test(agent.province)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Province.\");\n        setShowError(true);\n      } else if (!validPostalCode.test(agent.postalCode)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Postal Code.\");\n        setShowError(true);\n      } else if (!validPassword.test(agent.password)) {\n        setShowLoader(false);\n        setErrorMessage(\n          \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n        );\n        setShowError(true);\n      } else {\n        if (props.name === \"Update\") {\n          let url = \"agent/update\";\n          var payload = {\n            agentId: agent.agentId,\n            complexName: agent.complexName,\n            contractId: agent.contractId,\n            name: agent.name,\n            surname: agent.surname,\n            id: agent.id,\n            cellNum: agent.cellNum,\n            street1: agent.street1,\n            street2: agent.street2,\n            city: agent.city,\n            province: agent.province,\n            postalCode: agent.postalCode,\n            password: agent.password,\n          };\n          Connection.processPostRequest(payload, url, (response: any) => {\n            mapResponse(response);\n          });\n        }\n      }\n    }\n  };\n\n  return (\n    <IonGrid>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => path.push(\"/page/Agent/agent\")}\n        header={\"Success\"}\n        subHeader={successMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Name</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.name}\n              onIonChange={(e) => updateName(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Surname</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.surname}\n              onIonChange={(e) => updateSurname(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">ID</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.id}\n              onIonChange={(e) => updateId(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Cell Number</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.cellNum}\n              onIonChange={(e) => updateCellNum(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Street 1</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.street1}\n              onIonChange={(e) => updateStreet1(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Street 2</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.street2}\n              onIonChange={(e) => updateStreet2(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">City</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.city}\n              onIonChange={(e) => updateCity(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Province</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.province}\n              onIonChange={(e) => updateProvince(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Postal code</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.postalCode}\n              onIonChange={(e) => updatePostalCode(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Complex</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={agent.complexName}\n              onIonChange={(e) => updateComplexName(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Password</IonLabel>\n            <IonInput\n              type=\"password\"\n              disabled={props.isDisabled}\n              value={agent.password}\n              onIonChange={(e) => updatePassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\"> Confirm Password</IonLabel>\n            <IonInput\n              type=\"password\"\n              disabled={props.name === \"Add\" ? props.isDisabled : true}\n              value={enteredConfirm}\n              onIonChange={(e) => updateConfirm(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton\n            shape=\"round\"\n            type=\"submit\"\n            expand=\"block\"\n            onClick={buttonHandler}\n          >\n            {props.name}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default AgentForm;\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/PackageForm.tsx",["428"],"import {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n  IonTextarea,\n  IonToggle,\n  useIonViewDidEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\nimport { validName } from \"../Regex/Regex\";\n\nconst PackageForm: React.FC<{\n  name: string;\n  isDisabled: boolean;\n  id: string;\n}> = (props) => {\n\n  useIonViewDidEnter(()=>{\n    if(props.name === 'Update'){\n      setShowLoader(true);\n      getPackage();\n    }\n  });\n\n  const path = useHistory();\n  let valid: boolean = false;\n\n  const [pack, setPack] = useState(\n    {\n      packageId: \"\",\n      promotionId: \"\",\n      packageName: \"\",\n      minutes: 0,\n      standardPrice: \"\",\n      suvPrice: \"\",\n      description: \"\",\n      onPromotion: true,\n    });\n\n    const getPackage = () => {\n      var url = \"package/get/\".concat(props.id);\n  \n      Connection.processGetRequest({}, url, (response: any) => {\n        mapPackage(response);\n      });\n    };\n\n    const mapPackage = (response: any) => {\n      if (response.type === \"error\") {\n        setShowLoader(false);\n        setErrorMessage(response.data);\n        setShowError(true);\n      } else {\n        setShowLoader(false);\n        setPack(response.data.data);\n      }\n    };\n\n    const [showLoader, setShowLoader] = useState(false);\n    const [showError, setShowError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [successMessage, setSuccessMessage] = useState(\"\");\n    const [showSuccess, setShowSuccess] = useState(false);\n\n  const updatePackageName = (packageName: any) => {\n    pack.packageName = packageName;\n  };\n  const updateMinutes = (minutes: any) => {\n    pack.minutes = minutes;\n  };\n  const updateStandardPrice = (standardPrice: any) => {\n    pack.standardPrice = standardPrice\n  };\n  const updateSuvPrice = (suvPrice: any) => {\n   pack.suvPrice = suvPrice;\n  };\n  const updateDescription = (description: any) => {\n    pack.description = description;\n  };\n  const updateOnPromotion = (onPromotion: any) => {\n    pack.onPromotion = onPromotion;\n  };\n\n  function mapDeleteResponse(response: any) {\n    return (console.log(\"deleted\"));\n  }\n\n  const buttonHandler = () => {\n    validateForm();\n    if(valid === true){\n    if (props.name === \"Update\") {\n      var url = \"package/update\";\n      var payload = {\n        packageId: pack.packageId,\n        promotionId: pack.promotionId,\n        packageName: pack.packageName,\n        minutes: pack.minutes,\n        standardPrice: pack.standardPrice,\n        description:pack.description,\n        suvPrice: pack.suvPrice,\n        onPromotion: pack.onPromotion,\n      };\n\n      Connection.processPostRequest(payload, url, (response: any) => {\n        mapResponse(response);\n      });\n    } else if (props.name === \"Delete\") {\n      url = \"package/remove/\".concat(pack.packageId);\n\n      Connection.processDeleteRequest({}, url,(response: any)=>{\n        mapDeleteResponse(response);\n      })\n\n    } else {\n      url = \"package/add\";\n      var payload = {\n        packageId: pack.packageId,\n        promotionId: pack.promotionId,\n        packageName: pack.packageName,\n        minutes: pack.minutes,\n        standardPrice: pack.standardPrice,\n        description:pack.description,\n        suvPrice: pack.suvPrice,\n        onPromotion: pack.onPromotion,\n      };\n      Connection.processPostRequest(payload, url, (response: any) => {\n        mapResponse(response);\n      });\n    }\n  }\n  };\n\n  const mapResponse = (response: any) => {\n    if(response.data === 'error'){\n      setShowLoader(false);\n      setErrorMessage(response.data.data);\n      setShowError(true);\n    }else{\n      setShowLoader(false);\n      if(props.name === 'Update'){\n        setSuccessMessage('Successfully Updated!');\n        setShowSuccess(true);\n      }else{\n        setSuccessMessage('Successfully Added!');\n        setShowSuccess(true);\n      }\n    }\n  };\n\n  const validateForm = () => {\n    if(pack.packageName === '' || pack.standardPrice === '' || pack.suvPrice === '' || pack.description === ''){\n      setShowLoader(false);\n      setErrorMessage('Fields must not be empty.')\n      setShowError(true);\n    }else if(!validName.test(pack.packageName)){\n      setShowLoader(false);\n      setErrorMessage('Invalid Package Name.')\n      setShowError(true);\n    }else if(pack.minutes <= 0){\n      setShowLoader(false);\n      setErrorMessage('You cannot have 0 minutes.')\n      setShowError(true);\n    }else if(pack.standardPrice <='0'){\n      setShowLoader(false);\n      setErrorMessage('You cannot have a free item')\n      setShowError(true);\n    }else{\n      valid = true;\n    }\n  }\n  return (\n    <IonGrid>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => path.push(\"/page/Package/package\")}\n        header={\"Success\"}\n        subHeader={successMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Package Name</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={pack.packageName}\n              onIonChange={(e) => updatePackageName(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Minutes</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={pack.minutes}\n              onIonChange={(e) => updateMinutes(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Standard Price</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={pack.standardPrice}\n              onIonChange={(e) => updateStandardPrice(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">SUV Price</IonLabel>\n            <IonInput\n              disabled={props.isDisabled}\n              value={pack.suvPrice}\n              onIonChange={(e) => updateSuvPrice(e.detail.value)}\n            ></IonInput>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Description</IonLabel>\n            <IonTextarea\n            spellcheck={true}\n              disabled={props.isDisabled}\n              value={pack.description}\n              onIonChange={(e) => updateDescription(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel>On Promotion</IonLabel>\n            <IonToggle\n              color={\"primary\"}\n              disabled={props.isDisabled}\n              checked={pack.onPromotion}\n              onIonChange={(e) => updateOnPromotion(e.detail.checked)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton shape=\"round\" type=\"submit\" expand=\"block\" onClick={buttonHandler}>\n            {props.name}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default PackageForm;","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/PromotionForm.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/ForgotPassword.tsx",["429","430","431"],"/** @jsxImportSource theme-ui */\nimport { jsx } from \"theme-ui\";\nimport {\n  IonAlert,\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonImg,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonPage,\n  IonRow,\n  IonSelect,\n  IonSelectOption,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { validCellNum, validEmail } from \"../../components/Regex/Regex\";\nimport TGWLogo from \"../../components/TGWLogo.png\";\nimport Connection from \"../../mixins/Connection\";\nimport { Storage } from \"@capacitor/storage\";\n\nconst ForgotPassword: React.FC = () => {\n  const path = useHistory();\n\n  const [cellNum, setCellNum] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [selection, setSelection] = useState(\"cell\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const updateCellNum = (cellNum: any) => setCellNum(cellNum);\n  const updateEmail = (email: any) => setEmail(email);\n  const updateSelection = (selection: any) => {\n    setSelection(selection);\n    setCellNum('');\n    setEmail('');\n  };\n\n  const buttonHandler = () => {\n    setShowLoader(true);   \n    if (selection === \"cell\") {\n      if (cellNum !== \"\") {\n        if (validCellNum.test(cellNum)) {\n          let url = \"forgot/verify/\".concat(selection,'/',cellNum);\n          Connection.processPostRequest({}, url, (response: any) =>\n            mapResponse(response, cellNum, selection)\n          );\n        } else {\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Cell Number.\");\n          setShowError(true);\n        }\n      } else {\n        setShowLoader(false);\n        setErrorMessage(\"You need to provide a cell number to continue.\");\n        setShowError(true);\n      }\n    } else {\n      if(email !== ''){\n        if(validEmail.test(email)){\n          let url = \"forgot/verify/\".concat(selection,'/',email);\n          Connection.processPostRequest({}, url, (response: any) =>\n            mapResponse(response, email, selection)\n          );\n        }else{\n          setShowLoader(false);\n          setErrorMessage(\"Invalid Email.\");\n          setShowError(true);\n        }\n      }else{\n        setShowLoader(false);\n        setErrorMessage(\"You need to provide an email to continue.\");\n        setShowError(true);\n      }\n    }\n  };\n\n  const mapResponse = (response: any, id: any, type: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setIdentifier(id);\n      setType(type)\n      setAdminId(response.data.data);\n      path.push(\"/forgot/otp\");\n    }\n  };\n\n  const setAdminId = async (data: any) => {\n    await Storage.set({\n      key: 'adminId',\n      value: data,\n    });\n  };\n\n  const setIdentifier = async (data: any) => {\n    await Storage.set({\n      key: 'id',\n      value: data,\n    });\n  };\n\n  const setType = async(data: any) => {\n    await Storage.set({\n      key: 'type',\n      value: data,\n    });\n  }\n\n  return (\n    <IonPage>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/signIn\" />\n          </IonButtons>\n          <IonTitle>Forgot Password</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonCard sx={styles.card}>\n          <IonGrid>\n            <IonRow>\n              <IonCol>\n                <IonItem>\n                  <IonLabel>Verification Type</IonLabel>\n                  <IonSelect\n                    value={selection}\n                    onIonChange={(e) => updateSelection(e.detail.value)}\n                  >\n                    <IonSelectOption value=\"cell\">\n                      Cell Number\n                    </IonSelectOption>\n                    <IonSelectOption value=\"email\">Email</IonSelectOption>\n                  </IonSelect>\n                </IonItem>\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <IonToolbar>\n                  <IonTitle size=\"small\">\n                    Please enter the {selection} associated with your account\n                  </IonTitle>\n                </IonToolbar>\n              </IonCol>\n            </IonRow>\n            <IonRow>\n              {selection === \"cell\" ? (\n                <IonCol>\n                  <IonItem sx={styles.input}>\n                    <IonLabel position=\"floating\">Cell Number</IonLabel>\n                    <IonInput\n                      type=\"text\"\n                      value={cellNum}\n                      onIonChange={(e) => updateCellNum(e.detail.value)}\n                    />\n                  </IonItem>\n                </IonCol>\n              ) : (\n                <IonCol>\n                  <IonItem sx={styles.input}>\n                    <IonLabel position=\"floating\">Email</IonLabel>\n                    <IonInput\n                      type=\"text\"\n                      value={email}\n                      onIonChange={(e) => updateEmail(e.detail.value)}\n                    />\n                  </IonItem>\n                </IonCol>\n              )}\n            </IonRow>\n            <IonRow>\n              <IonCol>\n                <IonButton\n                  shape=\"round\"\n                  type=\"submit\"\n                  expand=\"block\"\n                  onClick={() => buttonHandler()}\n                >\n                  Submit\n                </IonButton>\n              </IonCol>\n            </IonRow>\n          </IonGrid>\n        </IonCard>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default ForgotPassword;\n\nconst styles = {\n  input: {\n    mb: 2,\n  },\n  card: {\n    mt: \"30vh\",\n  },\n};\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/NewPassword.tsx",["432","433","434"],"/** @jsxImportSource theme-ui */\nimport {\n  IonAlert,\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonContent,\n  IonHeader,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { validPassword } from \"../../components/Regex/Regex\";\nimport { Storage } from \"@capacitor/storage\";\nimport Connection from \"../../mixins/Connection\";\n\nconst NewPassword: React.FC = () => {\n  const path = useHistory();\n\n  const [message, setMessage] = useState(\"\");\n  const [showInfo, setShowInfo] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const [password, setPassword] = useState(\"\");\n  const [cPassword, setCPassword] = useState(\"\");\n\n  const updatePassword = (password: any) => setPassword(password.target.value);\n  const updateCPassword = (cPassword: any) =>\n    setCPassword(cPassword.target.value);\n\n  const buttonHandler = () => {\n    setShowLoader(true);\n    if (password === \"\" && cPassword === \"\") {\n      setShowLoader(false);\n      setMessage(\"Fields must not be empty.\");\n      setShowError(true);\n    } else if (password !== cPassword) {\n      setShowLoader(false);\n      setMessage(\"Passwords do not match.\");\n      setShowError(true);\n    } else if (!validPassword.test(password)) {\n      setShowLoader(false);\n      setMessage(\"Weak password.\");\n      setShowError(true);\n    } else {\n      getAdminId();\n    }\n  };\n  const getAdminId = async () => {\n    const id: any = await Storage.get({ key: \"adminId\" });\n    const adminId = id.value;\n\n    submitPassword(adminId);\n  };\n\n  const submitPassword = (adminId: any) => {\n    let url = \"forgot/changePassword\";\n    var payload = {\n      adminId: adminId,\n      name: \"\",\n      surname: \"\",\n      email: \"\",\n      cellNum: \"\",\n      password: password,\n    };\n    Connection.processPostRequest(payload, url, (response: any) =>\n      mapResponse(response)\n    );\n  };\n\n  const mapResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setMessage(response.data.data);\n      setShowSuccess(true);\n    }\n  };\n\n  const removeAdminId = async () => {\n    await Storage.remove({ key: \"adminId\" });\n  };\n  const removeIdentifier = async () => {\n    await Storage.remove({\n      key: \"id\",\n    });\n  };\n\n  const removeType = async () => {\n    await Storage.remove({\n      key: \"type\",\n    });\n  };\n\n  return (\n    <IonPage>\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => {\n          setShowError(false);\n          removeAdminId();\n          removeType();\n          removeIdentifier();\n          path.replace(\"/signIn\");\n        }}\n        header={\"Succcess\"}\n        subHeader={\"Request Processed.\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showInfo}\n        onDidDismiss={() => setShowInfo(false)}\n        cssClass=\"my-custom-class\"\n        header={\"Warning\"}\n        message={message}\n        buttons={[\n          {\n            text: \"Cancel\",\n            role: \"cancel\",\n            cssClass: \"secondary\",\n            handler: () => {},\n          },\n          {\n            text: \"Yes, I'm sure\",\n            handler: () => {\n              removeAdminId();\n              removeType();\n              removeIdentifier();\n              path.replace(\"/signIn\");\n            },\n          },\n        ]}\n      />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton />\n          </IonButtons>\n          <IonTitle>New Password </IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonCard sx={styles.card}>\n          <IonCardHeader>\n            <IonTitle size=\"small\" sx={styles.card.title}>\n              Please enter your new Password below:\n            </IonTitle>\n          </IonCardHeader>\n          <IonCardContent>\n            <IonItem>\n              <IonLabel position=\"floating\">Password</IonLabel>\n              <IonInput\n                type=\"password\"\n                onIonChange={(e) => updatePassword(e)}\n              />\n            </IonItem>\n            <IonItem sx={styles.input}>\n              <IonLabel position=\"floating\"> Confirm Password</IonLabel>\n              <IonInput\n                type=\"password\"\n                onIonChange={(e) => updateCPassword(e)}\n              />\n            </IonItem>\n            <IonButton\n              type=\"submit\"\n              expand=\"block\"\n              shape=\"round\"\n              onClick={buttonHandler}\n            >\n              Submit\n            </IonButton>\n          </IonCardContent>\n        </IonCard>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default NewPassword;\n\nconst styles = {\n  input: {\n    mb: 4,\n  },\n\n  card: {\n    title: {\n      pl: 4,\n    },\n    mt: \"25vh\",\n  },\n};\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/Otp.tsx",["435","436","437","438","439","440"],"/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport {\n  IonAlert,\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\nimport { Link } from \"@theme-ui/components\";\nimport { verify } from \"crypto\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { validOtp } from \"../../components/Regex/Regex\";\nimport Connection from \"../../mixins/Connection\";\n\nconst Otp: React.FC = () => {\n  const path = useHistory();\n  const [otp, setOtp] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const updateOtp = (otp: any) => setOtp(otp.target.value);\n\n  const buttonHandler = () => {\n    setShowLoader(true);\n    if (otp === \"\") {\n      setShowLoader(false);\n      setMessage(\"Please enter One-Time Pin.\");\n      setShowError(true);\n    } else if (!validOtp.test(otp)) {\n      setShowLoader(false);\n      setMessage(\"Invalid One-Time Pin.\");\n      setShowError(true);\n    } else {\n      getAdminId();\n    }\n  };\n\n  const getAdminId = async () => {\n    const response: any = await Storage.get({\n      key: \"adminId\",\n    });\n    const id = response.value;\n\n    let date = new Date();\n    let time = date.toISOString();\n\n    verifyOtp(time, id);\n  };\n\n  const verifyOtp = (time: any, id: any) => {\n    let url = \"forgot/verifyOtp/\".concat(otp, \"/\", time, \"/\", 'sechele.rk@gmail.com');\n    Connection.processPostRequest({}, url, (response: any) =>\n      mapResponse(response)\n    );\n  };\n\n  const mapResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      console.log(response.data.data)\n      path.push(\"/newPassword\");\n    }\n  };\n\n  const resendHandler = () => {\n      setShowLoader(true);\n      getType();\n  };\n\n  const getType = async () => {\n    const response: any = await Storage.get({\n      key: \"type\",\n    });\n    const type = response.value;\n    getIdtifier(type);\n  };\n\n  const getIdtifier = async (type: any) => {\n    const response: any = await Storage.get({\n      key: \"id\",\n    });\n\n    const id = response.value;\n    resendOtp(id, type);\n  };\n\n  const resendOtp = (id: any, type: any) => {\n    let url = 'forgot/resendOtp/'.concat(type, '/', id);\n    Connection.processPostRequest({}, url, (response: any) => mapResendResponse(response))\n  };\nconst mapResendResponse = (response: any) => {\n  if(response.type === 'error'){\n    setShowLoader(false);\n    setMessage(response.data.data);\n    setShowError(true);\n  }else{\n    setShowLoader(false);\n    setMessage(response.data.data);\n    setShowSuccess(true);\n  }\n};\n  return (\n    <IonPage>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => setShowSuccess(false)}\n        header={\"Success\"}\n        subHeader={\"Request granted.\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonTitle>One-Time Pin Validation</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonCard sx={styles.card}>\n          <IonCardHeader>\n            <IonCardSubtitle>\n              Please Enter the One-Time Pin sent to your phone:\n            </IonCardSubtitle>\n          </IonCardHeader>\n          <IonCardContent>\n            <IonItem sx={styles.input}>\n              <IonLabel position=\"floating\">One-Time Pin</IonLabel>\n              <IonInput type=\"text\" onIonChange={(e) => updateOtp(e)} />\n            </IonItem>\n            <IonRow>\n              <IonCol size='8'> <p> No Code ? <span sx={styles.resend} onClick={() => resendHandler()}>Resend Code</span></p></IonCol>\n              <IonCol>\n            <IonButton\n              type=\"submit\"\n              shape=\"round\"\n              expand=\"block\"\n              sx={styles.button}\n              onClick={() => buttonHandler()}\n            >\n              Verify\n            </IonButton>\n            </IonCol>\n            </IonRow>\n          </IonCardContent>\n        </IonCard>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Otp;\n\nconst styles = {\n  resend:{\n    color: 'green',\n    textDecoration: 'underline',\n  },\n  button:{\n    mt: '-1',\n  },\n  input: {\n    mb: \"4\",\n  },\n\n  card: {\n    mt: \"28vh\",\n  },\n};\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Card/CalCard.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Clients/Clients.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Card/ClientCard.tsx",[],"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Recover Account/Verify.tsx",["441","442","443","444","445"],"/** @jsxImportSource theme-ui */\nimport {\n  IonAlert,\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonIcon,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\nimport { Browser } from \"@capacitor/browser\";\nimport React, { useState } from \"react\";\nimport { validCellNum, validEmail } from \"../../components/Regex/Regex\";\nimport Connection from \"../../mixins/Connection\";\nimport { useHistory } from \"react-router\";\nimport { Storage } from \"@capacitor/storage\";\n\nconst Verify: React.FC = () => {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  const updateUsername = (username: any) => setUsername(username);\n\n  const openWebsite = async () => {\n    await Browser.open({ url: \"https://thegreenwash.co.za\" });\n  };\n\n  const setAdminId = async (adminId: any) => {\n    await Storage.set({ key: \"adminId\", value: adminId, });\n  };\n\n  const buttonHandler = () => {\n    setShowLoader(true);\n    if (!validCellNum.test(username) && !validEmail.test(username)) {\n      setShowLoader(false);\n      setMessage(\"Invalid Cell Number or Email\");\n      setShowError(true);\n    } else {\n      let url = \"recovery/otp/\".concat(username);\n      Connection.processGetRequest({}, url, (response: any) =>\n        mapResponse(response)\n      );\n    }\n  };\n\n  const mapResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data.data);\n      setShowError(true);\n     } else {\n      setShowLoader(false);\n      setAdminId(response.data.data);\n      history.replace(\"/recover/otp\");\n    }\n  };\n\n  return (\n    <IonPage>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons slot=\"start\">\n            <IonBackButton />\n          </IonButtons>\n          <IonTitle>Verify Profile</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonGrid>\n          <IonRow>\n            <IonCol></IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonCard sx={styles.card}>\n                <IonCardHeader>\n                  <IonCardSubtitle style={{ textAlign: \"center\" }}>\n                    Please enter the last cell number or email associated with\n                    your account\n                  </IonCardSubtitle>\n                </IonCardHeader>\n                <IonCardContent>\n                  <IonRow>\n                    <IonCol>\n                      <IonItem>\n                        <IonLabel position=\"floating\">\n                          Cell Number/Email\n                        </IonLabel>\n                        <IonInput\n                          type=\"text\"\n                          value={username}\n                          onIonChange={(e) => updateUsername(e.detail.value)}\n                        />\n                      </IonItem>\n                    </IonCol>\n                  </IonRow>\n                  <IonRow>\n                    <IonCol>\n                      <IonButton\n                        type=\"submit\"\n                        expand=\"block\"\n                        shape=\"round\"\n                        onClick={() => buttonHandler()}\n                      >\n                        Submit\n                      </IonButton>\n                    </IonCol>\n                  </IonRow>\n                  <IonRow>\n                    <IonCol offset=\"1.5\">\n                      <p sx={styles.link}>\n                        Having a problem?{\" \"}\n                        <a onClick={() => openWebsite()}>Leave us a query</a>\n                      </p>\n                    </IonCol>\n                  </IonRow>\n                </IonCardContent>\n              </IonCard>\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Verify;\n\nconst styles = {\n  link: {\n    pt: \"3\",\n  },\n  card: {\n    mt: \"23vh\",\n  },\n};\n","/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/Recover Account/RecoverOtp.tsx",["446","447","448","449"],"/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport {\n    IonAlert,\n  IonBackButton,\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { validOtp } from \"../../components/Regex/Regex\";\nimport Connection from \"../../mixins/Connection\";\n\nconst RecoverOtp: React.FC = () => {\n  const history = useHistory();\n  const [otp, setOtp] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showSuccessResend, setShowSuccessResend] = useState(false);\n\n  const updateOtp = (otp: any) => setOtp(otp);\n  const getId = async(username: any) => {\n    const id: any = await Storage.get({key: \"adminId\"});\n    const adminId: any = id.value;\n\n    let url = \"resendOtp/\"\n  };\nconst getUsername = async() => {\n  const id: any = await Storage.get({key: \"username\"});\n  const username: any = id.value;\n\n  getId(username);\n};\n  const getAdminId = async() => {\n    const id: any = await Storage.get({key: \"adminId\"});\n    const adminId: any = id.value;\n\n    const time = new Date().toISOString();\n\n    let url = \"recovery/recover/\".concat(otp, \"/\", adminId, \"/\", time);\n    Connection.processPostRequest({}, url, (response: any) => mapResponse(response))\n};\n\nconst mapResponse = (response: any) => {\n  if(response.type === \"error\"){\n      setShowLoader(false);\n      setMessage(\"Otp Error.\");\n      setShowError(true);\n  }else{\n      setShowLoader(false);\n      setMessage(\"Account Recovered.\");\n      setShowSuccess(true);\n  }\n};\n\n  const resendOtp = () => {\n      getUsername();\n  };\n\n  const buttonHandler = () => {\n      if(!validOtp.test(otp)){\n          setShowLoader(false);\n          setMessage(\"Invalid Otp\");\n          setShowError(true);\n      }else{\n          getAdminId();\n      }\n  };\n  return (\n    <IonPage>\n        <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showSuccessResend}\n        onDidDismiss={() => history.replace(\"/signIn\")}\n        header={\"Success\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => setShowSuccess(false)}\n        header={\"Success\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonButtons>\n            <IonBackButton />\n          </IonButtons>\n          <IonTitle>Verify Otp</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonCard sx={styles.card}>\n                <IonCardHeader>\n                  <IonCardSubtitle style={{ textAlign: \"center\" }}>\n                    Enter the otp that was sent to the respective choice of\n                    medium\n                  </IonCardSubtitle>\n                </IonCardHeader>\n                <IonCardContent>\n                  <IonRow>\n                    <IonCol>\n                      <IonItem>\n                        <IonLabel position=\"floating\">One-Time Pin</IonLabel>\n                        <IonInput\n                          type=\"text\"\n                          value={otp}\n                          onIonChange={(e) => updateOtp(e.detail.value)}\n                        />\n                      </IonItem>\n                    </IonCol>\n                  </IonRow>\n                  <IonRow>\n                      <IonCol>\n                          <IonButton type=\"submit\" expand=\"block\" shape=\"round\" sx={styles.button} onClick={()=>buttonHandler()}>Verify</IonButton>\n                      </IonCol>\n                  </IonRow>\n                  <IonRow>\n                      <IonCol>\n                          <p style={{textAlign: \"center\"}}>Didn't recieve it ? <a onClick={()=>resendOtp()}>Resend One-Time Pin</a></p>\n                      </IonCol>\n                  </IonRow>\n                </IonCardContent>\n              </IonCard>\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default RecoverOtp;\n\nconst styles = {\n    card:{\n        mt: \"23vh\",\n    },\n    button: {\n        mt: \"3\",\n        mb: \"4\",\n    },\n};\n",{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","replacedBy":"453"},{"ruleId":"454","severity":1,"message":"455","line":1,"column":18,"nodeType":"456","messageId":"457","endLine":1,"endColumn":33},{"ruleId":"454","severity":1,"message":"458","line":3,"column":10,"nodeType":"456","messageId":"457","endLine":3,"endColumn":18},{"ruleId":"454","severity":1,"message":"459","line":3,"column":3,"nodeType":"456","messageId":"457","endLine":3,"endColumn":13},{"ruleId":"454","severity":1,"message":"460","line":14,"column":3,"nodeType":"456","messageId":"457","endLine":14,"endColumn":10},{"ruleId":"454","severity":1,"message":"461","line":15,"column":3,"nodeType":"456","messageId":"457","endLine":15,"endColumn":11},{"ruleId":"454","severity":1,"message":"462","line":51,"column":7,"nodeType":"456","messageId":"457","endLine":51,"endColumn":19},{"ruleId":"454","severity":1,"message":"463","line":35,"column":10,"nodeType":"456","messageId":"457","endLine":35,"endColumn":20},{"ruleId":"454","severity":1,"message":"464","line":35,"column":22,"nodeType":"456","messageId":"457","endLine":35,"endColumn":35},{"ruleId":"454","severity":1,"message":"465","line":36,"column":10,"nodeType":"456","messageId":"457","endLine":36,"endColumn":19},{"ruleId":"454","severity":1,"message":"466","line":36,"column":21,"nodeType":"456","messageId":"457","endLine":36,"endColumn":33},{"ruleId":"454","severity":1,"message":"467","line":37,"column":10,"nodeType":"456","messageId":"457","endLine":37,"endColumn":22},{"ruleId":"454","severity":1,"message":"468","line":37,"column":24,"nodeType":"456","messageId":"457","endLine":37,"endColumn":39},{"ruleId":"454","severity":1,"message":"469","line":3,"column":3,"nodeType":"456","messageId":"457","endLine":3,"endColumn":16},{"ruleId":"454","severity":1,"message":"459","line":5,"column":3,"nodeType":"456","messageId":"457","endLine":5,"endColumn":13},{"ruleId":"454","severity":1,"message":"470","line":8,"column":3,"nodeType":"456","messageId":"457","endLine":8,"endColumn":12},{"ruleId":"454","severity":1,"message":"471","line":10,"column":3,"nodeType":"456","messageId":"457","endLine":10,"endColumn":12},{"ruleId":"454","severity":1,"message":"472","line":19,"column":3,"nodeType":"456","messageId":"457","endLine":19,"endColumn":11},{"ruleId":"454","severity":1,"message":"473","line":3,"column":3,"nodeType":"456","messageId":"457","endLine":3,"endColumn":12},{"ruleId":"454","severity":1,"message":"474","line":5,"column":3,"nodeType":"456","messageId":"457","endLine":5,"endColumn":9},{"ruleId":"454","severity":1,"message":"475","line":7,"column":3,"nodeType":"456","messageId":"457","endLine":7,"endColumn":10},{"ruleId":"454","severity":1,"message":"476","line":9,"column":3,"nodeType":"456","messageId":"457","endLine":9,"endColumn":9},{"ruleId":"454","severity":1,"message":"477","line":10,"column":3,"nodeType":"456","messageId":"457","endLine":10,"endColumn":11},{"ruleId":"454","severity":1,"message":"478","line":11,"column":3,"nodeType":"456","messageId":"457","endLine":11,"endColumn":10},{"ruleId":"454","severity":1,"message":"479","line":12,"column":3,"nodeType":"456","messageId":"457","endLine":12,"endColumn":11},{"ruleId":"454","severity":1,"message":"480","line":14,"column":3,"nodeType":"456","messageId":"457","endLine":14,"endColumn":9},{"ruleId":"454","severity":1,"message":"481","line":2,"column":27,"nodeType":"456","messageId":"457","endLine":2,"endColumn":39},{"ruleId":"454","severity":1,"message":"482","line":13,"column":8,"nodeType":"456","messageId":"457","endLine":13,"endColumn":12},{"ruleId":"454","severity":1,"message":"469","line":2,"column":5,"nodeType":"456","messageId":"457","endLine":2,"endColumn":18},{"ruleId":"454","severity":1,"message":"483","line":7,"column":17,"nodeType":"456","messageId":"457","endLine":7,"endColumn":38},{"ruleId":"454","severity":1,"message":"484","line":7,"column":11,"nodeType":"456","messageId":"457","endLine":7,"endColumn":15},{"ruleId":"454","severity":1,"message":"485","line":18,"column":11,"nodeType":"456","messageId":"457","endLine":18,"endColumn":20},{"ruleId":"454","severity":1,"message":"486","line":26,"column":11,"nodeType":"456","messageId":"457","endLine":26,"endColumn":18},{"ruleId":"454","severity":1,"message":"487","line":41,"column":11,"nodeType":"456","messageId":"457","endLine":41,"endColumn":16},{"ruleId":"454","severity":1,"message":"487","line":17,"column":11,"nodeType":"456","messageId":"457","endLine":17,"endColumn":16},{"ruleId":"454","severity":1,"message":"488","line":47,"column":7,"nodeType":"456","messageId":"457","endLine":47,"endColumn":15},{"ruleId":"454","severity":1,"message":"489","line":1,"column":17,"nodeType":"456","messageId":"457","endLine":1,"endColumn":25},{"ruleId":"490","severity":1,"message":"491","line":91,"column":16,"nodeType":"492","messageId":"493","endLine":91,"endColumn":24,"fix":"494"},{"ruleId":"490","severity":1,"message":"491","line":92,"column":14,"nodeType":"492","messageId":"493","endLine":92,"endColumn":22,"fix":"495"},{"ruleId":"454","severity":1,"message":"496","line":97,"column":7,"nodeType":"456","messageId":"457","endLine":97,"endColumn":17},{"ruleId":"454","severity":1,"message":"497","line":12,"column":3,"nodeType":"456","messageId":"457","endLine":12,"endColumn":22},{"ruleId":"498","severity":1,"message":"499","line":86,"column":11,"nodeType":"456","messageId":"500","endLine":86,"endColumn":18},{"ruleId":"454","severity":1,"message":"501","line":31,"column":10,"nodeType":"456","messageId":"457","endLine":31,"endColumn":21},{"ruleId":"454","severity":1,"message":"502","line":31,"column":23,"nodeType":"456","messageId":"457","endLine":31,"endColumn":37},{"ruleId":"454","severity":1,"message":"465","line":32,"column":10,"nodeType":"456","messageId":"457","endLine":32,"endColumn":19},{"ruleId":"454","severity":1,"message":"466","line":32,"column":21,"nodeType":"456","messageId":"457","endLine":32,"endColumn":33},{"ruleId":"454","severity":1,"message":"467","line":33,"column":10,"nodeType":"456","messageId":"457","endLine":33,"endColumn":22},{"ruleId":"454","severity":1,"message":"468","line":33,"column":24,"nodeType":"456","messageId":"457","endLine":33,"endColumn":39},{"ruleId":"498","severity":1,"message":"503","line":91,"column":11,"nodeType":"456","messageId":"500","endLine":91,"endColumn":15},{"ruleId":"454","severity":1,"message":"504","line":14,"column":3,"nodeType":"456","messageId":"457","endLine":14,"endColumn":21},{"ruleId":"454","severity":1,"message":"505","line":15,"column":3,"nodeType":"456","messageId":"457","endLine":15,"endColumn":21},{"ruleId":"454","severity":1,"message":"506","line":26,"column":7,"nodeType":"456","messageId":"457","endLine":26,"endColumn":12},{"ruleId":"454","severity":1,"message":"497","line":10,"column":3,"nodeType":"456","messageId":"457","endLine":10,"endColumn":22},{"ruleId":"454","severity":1,"message":"463","line":84,"column":10,"nodeType":"456","messageId":"457","endLine":84,"endColumn":20},{"ruleId":"454","severity":1,"message":"464","line":84,"column":22,"nodeType":"456","messageId":"457","endLine":84,"endColumn":35},{"ruleId":"454","severity":1,"message":"465","line":85,"column":10,"nodeType":"456","messageId":"457","endLine":85,"endColumn":19},{"ruleId":"454","severity":1,"message":"467","line":86,"column":10,"nodeType":"456","messageId":"457","endLine":86,"endColumn":22},{"ruleId":"507","severity":1,"message":"508","line":97,"column":23,"nodeType":"509","messageId":"510","endLine":97,"endColumn":25},{"ruleId":"490","severity":1,"message":"491","line":131,"column":18,"nodeType":"492","messageId":"493","endLine":131,"endColumn":26,"fix":"511"},{"ruleId":"490","severity":1,"message":"491","line":132,"column":16,"nodeType":"492","messageId":"493","endLine":132,"endColumn":24,"fix":"512"},{"ruleId":"450","replacedBy":"513"},{"ruleId":"452","replacedBy":"514"},{"ruleId":"454","severity":1,"message":"455","line":1,"column":18,"nodeType":"456","messageId":"457","endLine":1,"endColumn":33},{"ruleId":"454","severity":1,"message":"458","line":3,"column":10,"nodeType":"456","messageId":"457","endLine":3,"endColumn":18},{"ruleId":"454","severity":1,"message":"481","line":2,"column":27,"nodeType":"456","messageId":"457","endLine":2,"endColumn":39},{"ruleId":"454","severity":1,"message":"462","line":52,"column":7,"nodeType":"456","messageId":"457","endLine":52,"endColumn":19},{"ruleId":"454","severity":1,"message":"515","line":110,"column":9,"nodeType":"456","messageId":"457","endLine":110,"endColumn":16},{"ruleId":"454","severity":1,"message":"473","line":3,"column":3,"nodeType":"456","messageId":"457","endLine":3,"endColumn":12},{"ruleId":"454","severity":1,"message":"474","line":5,"column":3,"nodeType":"456","messageId":"457","endLine":5,"endColumn":9},{"ruleId":"454","severity":1,"message":"475","line":7,"column":3,"nodeType":"456","messageId":"457","endLine":7,"endColumn":10},{"ruleId":"454","severity":1,"message":"476","line":9,"column":3,"nodeType":"456","messageId":"457","endLine":9,"endColumn":9},{"ruleId":"454","severity":1,"message":"477","line":10,"column":3,"nodeType":"456","messageId":"457","endLine":10,"endColumn":11},{"ruleId":"454","severity":1,"message":"478","line":11,"column":3,"nodeType":"456","messageId":"457","endLine":11,"endColumn":10},{"ruleId":"454","severity":1,"message":"479","line":12,"column":3,"nodeType":"456","messageId":"457","endLine":12,"endColumn":11},{"ruleId":"454","severity":1,"message":"480","line":14,"column":3,"nodeType":"456","messageId":"457","endLine":14,"endColumn":9},{"ruleId":"454","severity":1,"message":"469","line":4,"column":3,"nodeType":"456","messageId":"457","endLine":4,"endColumn":16},{"ruleId":"454","severity":1,"message":"459","line":6,"column":3,"nodeType":"456","messageId":"457","endLine":6,"endColumn":13},{"ruleId":"454","severity":1,"message":"470","line":10,"column":3,"nodeType":"456","messageId":"457","endLine":10,"endColumn":12},{"ruleId":"454","severity":1,"message":"471","line":12,"column":3,"nodeType":"456","messageId":"457","endLine":12,"endColumn":12},{"ruleId":"454","severity":1,"message":"516","line":20,"column":3,"nodeType":"456","messageId":"457","endLine":20,"endColumn":12},{"ruleId":"454","severity":1,"message":"517","line":21,"column":3,"nodeType":"456","messageId":"457","endLine":21,"endColumn":18},{"ruleId":"454","severity":1,"message":"472","line":23,"column":3,"nodeType":"456","messageId":"457","endLine":23,"endColumn":11},{"ruleId":"454","severity":1,"message":"518","line":26,"column":3,"nodeType":"456","messageId":"457","endLine":26,"endColumn":22},{"ruleId":"454","severity":1,"message":"519","line":29,"column":22,"nodeType":"456","messageId":"457","endLine":29,"endColumn":33},{"ruleId":"454","severity":1,"message":"520","line":91,"column":9,"nodeType":"456","messageId":"457","endLine":91,"endColumn":14},{"ruleId":"454","severity":1,"message":"521","line":2,"column":10,"nodeType":"456","messageId":"457","endLine":2,"endColumn":17},{"ruleId":"454","severity":1,"message":"515","line":31,"column":9,"nodeType":"456","messageId":"457","endLine":31,"endColumn":16},{"ruleId":"454","severity":1,"message":"504","line":9,"column":3,"nodeType":"456","messageId":"457","endLine":9,"endColumn":21},{"ruleId":"454","severity":1,"message":"497","line":10,"column":3,"nodeType":"456","messageId":"457","endLine":10,"endColumn":22},{"ruleId":"454","severity":1,"message":"522","line":16,"column":8,"nodeType":"456","messageId":"457","endLine":16,"endColumn":18},{"ruleId":"454","severity":1,"message":"484","line":18,"column":11,"nodeType":"456","messageId":"457","endLine":18,"endColumn":15},{"ruleId":"454","severity":1,"message":"485","line":29,"column":11,"nodeType":"456","messageId":"457","endLine":29,"endColumn":20},{"ruleId":"454","severity":1,"message":"486","line":37,"column":11,"nodeType":"456","messageId":"457","endLine":37,"endColumn":18},{"ruleId":"454","severity":1,"message":"487","line":52,"column":11,"nodeType":"456","messageId":"457","endLine":52,"endColumn":16},{"ruleId":"454","severity":1,"message":"463","line":72,"column":10,"nodeType":"456","messageId":"457","endLine":72,"endColumn":20},{"ruleId":"454","severity":1,"message":"464","line":72,"column":22,"nodeType":"456","messageId":"457","endLine":72,"endColumn":35},{"ruleId":"454","severity":1,"message":"465","line":73,"column":10,"nodeType":"456","messageId":"457","endLine":73,"endColumn":19},{"ruleId":"454","severity":1,"message":"466","line":73,"column":21,"nodeType":"456","messageId":"457","endLine":73,"endColumn":33},{"ruleId":"454","severity":1,"message":"467","line":74,"column":10,"nodeType":"456","messageId":"457","endLine":74,"endColumn":22},{"ruleId":"454","severity":1,"message":"468","line":74,"column":24,"nodeType":"456","messageId":"457","endLine":74,"endColumn":39},{"ruleId":"507","severity":1,"message":"508","line":85,"column":23,"nodeType":"509","messageId":"510","endLine":85,"endColumn":25},{"ruleId":"454","severity":1,"message":"489","line":1,"column":17,"nodeType":"456","messageId":"457","endLine":1,"endColumn":25},{"ruleId":"490","severity":1,"message":"491","line":91,"column":16,"nodeType":"492","messageId":"493","endLine":91,"endColumn":24,"fix":"523"},{"ruleId":"490","severity":1,"message":"491","line":92,"column":14,"nodeType":"492","messageId":"493","endLine":92,"endColumn":22,"fix":"524"},{"ruleId":"454","severity":1,"message":"496","line":97,"column":7,"nodeType":"456","messageId":"457","endLine":97,"endColumn":17},{"ruleId":"454","severity":1,"message":"525","line":130,"column":5,"nodeType":"456","messageId":"457","endLine":130,"endColumn":12},{"ruleId":"454","severity":1,"message":"497","line":9,"column":3,"nodeType":"456","messageId":"457","endLine":9,"endColumn":22},{"ruleId":"507","severity":1,"message":"508","line":36,"column":23,"nodeType":"509","messageId":"510","endLine":36,"endColumn":25},{"ruleId":"454","severity":1,"message":"473","line":5,"column":3,"nodeType":"456","messageId":"457","endLine":5,"endColumn":12},{"ruleId":"454","severity":1,"message":"526","line":26,"column":10,"nodeType":"456","messageId":"457","endLine":26,"endColumn":13},{"ruleId":"454","severity":1,"message":"527","line":34,"column":11,"nodeType":"456","messageId":"457","endLine":34,"endColumn":16},{"ruleId":"454","severity":1,"message":"515","line":44,"column":9,"nodeType":"456","messageId":"457","endLine":44,"endColumn":16},{"ruleId":"454","severity":1,"message":"528","line":87,"column":32,"nodeType":"456","messageId":"457","endLine":87,"endColumn":55},{"ruleId":"454","severity":1,"message":"529","line":90,"column":24,"nodeType":"456","messageId":"457","endLine":90,"endColumn":39},{"ruleId":"454","severity":1,"message":"530","line":91,"column":19,"nodeType":"456","messageId":"457","endLine":91,"endColumn":29},{"ruleId":"454","severity":1,"message":"531","line":92,"column":10,"nodeType":"456","messageId":"457","endLine":92,"endColumn":22},{"ruleId":"454","severity":1,"message":"532","line":97,"column":10,"nodeType":"456","messageId":"457","endLine":97,"endColumn":19},{"ruleId":"454","severity":1,"message":"533","line":292,"column":9,"nodeType":"456","messageId":"457","endLine":292,"endColumn":15},{"ruleId":"454","severity":1,"message":"534","line":309,"column":9,"nodeType":"456","messageId":"457","endLine":309,"endColumn":19},{"ruleId":"454","severity":1,"message":"484","line":7,"column":11,"nodeType":"456","messageId":"457","endLine":7,"endColumn":15},{"ruleId":"454","severity":1,"message":"485","line":18,"column":11,"nodeType":"456","messageId":"457","endLine":18,"endColumn":20},{"ruleId":"454","severity":1,"message":"486","line":26,"column":11,"nodeType":"456","messageId":"457","endLine":26,"endColumn":18},{"ruleId":"454","severity":1,"message":"487","line":41,"column":11,"nodeType":"456","messageId":"457","endLine":41,"endColumn":16},{"ruleId":"535","severity":1,"message":"536","line":2,"column":13,"nodeType":"537","messageId":"538","endLine":2,"endColumn":14,"suggestions":"539"},{"ruleId":"535","severity":1,"message":"540","line":2,"column":15,"nodeType":"537","messageId":"538","endLine":2,"endColumn":16,"suggestions":"541"},{"ruleId":"535","severity":1,"message":"542","line":2,"column":23,"nodeType":"537","messageId":"538","endLine":2,"endColumn":24,"suggestions":"543"},{"ruleId":"535","severity":1,"message":"544","line":2,"column":29,"nodeType":"537","messageId":"538","endLine":2,"endColumn":30,"suggestions":"545"},{"ruleId":"535","severity":1,"message":"536","line":2,"column":37,"nodeType":"537","messageId":"538","endLine":2,"endColumn":38,"suggestions":"546"},{"ruleId":"535","severity":1,"message":"540","line":2,"column":39,"nodeType":"537","messageId":"538","endLine":2,"endColumn":40,"suggestions":"547"},{"ruleId":"535","severity":1,"message":"542","line":2,"column":47,"nodeType":"537","messageId":"538","endLine":2,"endColumn":48,"suggestions":"548"},{"ruleId":"535","severity":1,"message":"536","line":2,"column":64,"nodeType":"537","messageId":"538","endLine":2,"endColumn":65,"suggestions":"549"},{"ruleId":"535","severity":1,"message":"544","line":2,"column":76,"nodeType":"537","messageId":"538","endLine":2,"endColumn":77,"suggestions":"550"},{"ruleId":"535","severity":1,"message":"544","line":2,"column":88,"nodeType":"537","messageId":"538","endLine":2,"endColumn":89,"suggestions":"551"},{"ruleId":"535","severity":1,"message":"544","line":2,"column":100,"nodeType":"537","messageId":"538","endLine":2,"endColumn":101,"suggestions":"552"},{"ruleId":"535","severity":1,"message":"553","line":2,"column":124,"nodeType":"537","messageId":"538","endLine":2,"endColumn":125,"suggestions":"554"},{"ruleId":"535","severity":1,"message":"544","line":2,"column":131,"nodeType":"537","messageId":"538","endLine":2,"endColumn":132,"suggestions":"555"},{"ruleId":"454","severity":1,"message":"556","line":34,"column":11,"nodeType":"456","messageId":"457","endLine":34,"endColumn":18},{"ruleId":"454","severity":1,"message":"557","line":91,"column":10,"nodeType":"456","messageId":"457","endLine":91,"endColumn":21},{"ruleId":"454","severity":1,"message":"483","line":7,"column":17,"nodeType":"456","messageId":"457","endLine":7,"endColumn":38},{"ruleId":"454","severity":1,"message":"487","line":24,"column":11,"nodeType":"456","messageId":"457","endLine":24,"endColumn":16},{"ruleId":"454","severity":1,"message":"558","line":73,"column":9,"nodeType":"456","messageId":"457","endLine":73,"endColumn":21},{"ruleId":"454","severity":1,"message":"559","line":104,"column":10,"nodeType":"456","messageId":"457","endLine":104,"endColumn":19},{"ruleId":"454","severity":1,"message":"560","line":106,"column":10,"nodeType":"456","messageId":"457","endLine":106,"endColumn":28},{"ruleId":"454","severity":1,"message":"561","line":106,"column":30,"nodeType":"456","messageId":"457","endLine":106,"endColumn":44},{"ruleId":"454","severity":1,"message":"562","line":107,"column":10,"nodeType":"456","messageId":"457","endLine":107,"endColumn":21},{"ruleId":"454","severity":1,"message":"563","line":107,"column":23,"nodeType":"456","messageId":"457","endLine":107,"endColumn":30},{"ruleId":"454","severity":1,"message":"564","line":108,"column":10,"nodeType":"456","messageId":"457","endLine":108,"endColumn":24},{"ruleId":"454","severity":1,"message":"565","line":108,"column":26,"nodeType":"456","messageId":"457","endLine":108,"endColumn":36},{"ruleId":"454","severity":1,"message":"566","line":109,"column":10,"nodeType":"456","messageId":"457","endLine":109,"endColumn":19},{"ruleId":"454","severity":1,"message":"567","line":109,"column":21,"nodeType":"456","messageId":"457","endLine":109,"endColumn":26},{"ruleId":"454","severity":1,"message":"568","line":110,"column":10,"nodeType":"456","messageId":"457","endLine":110,"endColumn":24},{"ruleId":"454","severity":1,"message":"569","line":110,"column":26,"nodeType":"456","messageId":"457","endLine":110,"endColumn":36},{"ruleId":"454","severity":1,"message":"570","line":111,"column":10,"nodeType":"456","messageId":"457","endLine":111,"endColumn":24},{"ruleId":"454","severity":1,"message":"571","line":111,"column":26,"nodeType":"456","messageId":"457","endLine":111,"endColumn":36},{"ruleId":"454","severity":1,"message":"572","line":112,"column":10,"nodeType":"456","messageId":"457","endLine":112,"endColumn":24},{"ruleId":"454","severity":1,"message":"573","line":112,"column":26,"nodeType":"456","messageId":"457","endLine":112,"endColumn":36},{"ruleId":"454","severity":1,"message":"574","line":113,"column":10,"nodeType":"456","messageId":"457","endLine":113,"endColumn":21},{"ruleId":"454","severity":1,"message":"575","line":113,"column":23,"nodeType":"456","messageId":"457","endLine":113,"endColumn":30},{"ruleId":"454","severity":1,"message":"576","line":114,"column":10,"nodeType":"456","messageId":"457","endLine":114,"endColumn":25},{"ruleId":"454","severity":1,"message":"577","line":114,"column":27,"nodeType":"456","messageId":"457","endLine":114,"endColumn":38},{"ruleId":"454","severity":1,"message":"578","line":115,"column":10,"nodeType":"456","messageId":"457","endLine":115,"endColumn":27},{"ruleId":"454","severity":1,"message":"579","line":115,"column":29,"nodeType":"456","messageId":"457","endLine":115,"endColumn":42},{"ruleId":"454","severity":1,"message":"580","line":116,"column":10,"nodeType":"456","messageId":"457","endLine":116,"endColumn":25},{"ruleId":"454","severity":1,"message":"581","line":116,"column":27,"nodeType":"456","messageId":"457","endLine":116,"endColumn":38},{"ruleId":"498","severity":1,"message":"499","line":124,"column":11,"nodeType":"456","messageId":"500","endLine":124,"endColumn":18},{"ruleId":"454","severity":1,"message":"582","line":2,"column":10,"nodeType":"456","messageId":"457","endLine":2,"endColumn":13},{"ruleId":"454","severity":1,"message":"476","line":13,"column":3,"nodeType":"456","messageId":"457","endLine":13,"endColumn":9},{"ruleId":"454","severity":1,"message":"583","line":28,"column":8,"nodeType":"456","messageId":"457","endLine":28,"endColumn":15},{"ruleId":"454","severity":1,"message":"584","line":10,"column":3,"nodeType":"456","messageId":"457","endLine":10,"endColumn":18},{"ruleId":"454","severity":1,"message":"497","line":19,"column":3,"nodeType":"456","messageId":"457","endLine":19,"endColumn":22},{"ruleId":"454","severity":1,"message":"463","line":34,"column":10,"nodeType":"456","messageId":"457","endLine":34,"endColumn":20},{"ruleId":"454","severity":1,"message":"469","line":5,"column":3,"nodeType":"456","messageId":"457","endLine":5,"endColumn":16},{"ruleId":"454","severity":1,"message":"459","line":7,"column":3,"nodeType":"456","messageId":"457","endLine":7,"endColumn":13},{"ruleId":"454","severity":1,"message":"585","line":12,"column":3,"nodeType":"456","messageId":"457","endLine":12,"endColumn":15},{"ruleId":"454","severity":1,"message":"475","line":15,"column":3,"nodeType":"456","messageId":"457","endLine":15,"endColumn":10},{"ruleId":"454","severity":1,"message":"586","line":26,"column":10,"nodeType":"456","messageId":"457","endLine":26,"endColumn":14},{"ruleId":"454","severity":1,"message":"587","line":27,"column":10,"nodeType":"456","messageId":"457","endLine":27,"endColumn":16},{"ruleId":"454","severity":1,"message":"585","line":11,"column":3,"nodeType":"456","messageId":"457","endLine":11,"endColumn":15},{"ruleId":"454","severity":1,"message":"588","line":16,"column":3,"nodeType":"456","messageId":"457","endLine":16,"endColumn":10},{"ruleId":"454","severity":1,"message":"501","line":40,"column":10,"nodeType":"456","messageId":"457","endLine":40,"endColumn":21},{"ruleId":"454","severity":1,"message":"502","line":40,"column":23,"nodeType":"456","messageId":"457","endLine":40,"endColumn":37},{"ruleId":"589","severity":1,"message":"590","line":148,"column":25,"nodeType":"591","endLine":148,"endColumn":58},{"ruleId":"454","severity":1,"message":"592","line":37,"column":29,"nodeType":"456","messageId":"457","endLine":37,"endColumn":49},{"ruleId":"454","severity":1,"message":"556","line":42,"column":11,"nodeType":"456","messageId":"457","endLine":42,"endColumn":23},{"ruleId":"454","severity":1,"message":"593","line":44,"column":9,"nodeType":"456","messageId":"457","endLine":44,"endColumn":12},{"ruleId":"589","severity":1,"message":"590","line":156,"column":80,"nodeType":"591","endLine":156,"endColumn":109},"no-native-reassign",["594"],"no-negated-in-lhs",["595"],"@typescript-eslint/no-unused-vars","'IonRouterOutlet' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'IonButtons' is defined but never used.","'IonNote' is defined but never used.","'IonTitle' is defined but never used.","'admin' is assigned a value but never used.","'showLoader' is assigned a value but never used.","'setShowLoader' is assigned a value but never used.","'showError' is assigned a value but never used.","'setShowError' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","'IonBackButton' is defined but never used.","'IonFooter' is defined but never used.","'IonHeader' is defined but never used.","'IonToast' is defined but never used.","'IonButton' is defined but never used.","'IonCol' is defined but never used.","'IonGrid' is defined but never used.","'IonImg' is defined but never used.","'IonInput' is defined but never used.","'IonItem' is defined but never used.","'IonLabel' is defined but never used.","'IonRow' is defined but never used.","'IonSplitPane' is defined but never used.","'Menu' is defined but never used.","'ReactComponentElement' is defined but never used.","'Pack' is defined but never used.","'Promotion' is defined but never used.","'Complex' is defined but never used.","'Agent' is defined but never used.","'password' is assigned a value but never used.","'useState' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"596","text":"597"},{"range":"598","text":"597"},"'pack' is assigned a value but never used.","'useIonViewWillEnter' is defined but never used.","@typescript-eslint/no-redeclare","'payload' is already defined.","redeclared","'showSuccess' is assigned a value but never used.","'setShowSuccess' is assigned a value but never used.","'pack' is already defined.","'useIonViewDidEnter' is defined but never used.","'useIonViewDidLeave' is defined but never used.","'cards' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"range":"599","text":"597"},{"range":"600","text":"597"},["594"],["595"],"'history' is assigned a value but never used.","'IonSelect' is defined but never used.","'IonSelectOption' is defined but never used.","'useIonViewWillLeave' is defined but never used.","'useLocation' is defined but never used.","'valid' is assigned a value but never used.","'Storage' is defined but never used.","'Connection' is defined but never used.",{"range":"601","text":"597"},{"range":"602","text":"597"},"'content' is assigned a value but never used.","'App' is defined but never used.","'Admin' is defined but never used.","'setPackPopularityValues' is assigned a value but never used.","'setComplexNames' is assigned a value but never used.","'setClients' is assigned a value but never used.","'mostBookings' is assigned a value but never used.","'showLeave' is assigned a value but never used.","'state5' is assigned a value but never used.","'removeUnit' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["603","604"],"Unnecessary escape character: \\].",["605","606"],"Unnecessary escape character: \\s.",["607","608"],"Unnecessary escape character: \\..",["609","610"],["611","612"],["613","614"],["615","616"],["617","618"],["619","620"],["621","622"],["623","624"],"Unnecessary escape character: \\-.",["625","626"],["627","628"],"'adminId' is assigned a value but never used.","'isFormValid' is assigned a value but never used.","'getComplexes' is assigned a value but never used.","'complexes' is assigned a value but never used.","'enteredComplexName' is assigned a value but never used.","'setComplexName' is assigned a value but never used.","'enteredName' is assigned a value but never used.","'setName' is assigned a value but never used.","'enteredSurname' is assigned a value but never used.","'setSurname' is assigned a value but never used.","'enteredId' is assigned a value but never used.","'setId' is assigned a value but never used.","'enteredCellNum' is assigned a value but never used.","'setCellNum' is assigned a value but never used.","'enteredStreet1' is assigned a value but never used.","'setStreet1' is assigned a value but never used.","'enteredStreet2' is assigned a value but never used.","'setStreet2' is assigned a value but never used.","'enteredCity' is assigned a value but never used.","'setCity' is assigned a value but never used.","'enteredProvince' is assigned a value but never used.","'setProvince' is assigned a value but never used.","'enteredPostalCode' is assigned a value but never used.","'setPostalCode' is assigned a value but never used.","'enteredPassword' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'jsx' is defined but never used.","'TGWLogo' is defined but never used.","'IonCardSubtitle' is defined but never used.","'IonCardTitle' is defined but never used.","'Link' is defined but never used.","'verify' is defined but never used.","'IonIcon' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setShowSuccessResend' is assigned a value but never used.","'url' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[1634,1634],"()",[1657,1657],[2878,2878],[2903,2903],[1634,1634],[1657,1657],{"messageId":"629","fix":"630","desc":"631"},{"messageId":"632","fix":"633","desc":"634"},{"messageId":"629","fix":"635","desc":"631"},{"messageId":"632","fix":"636","desc":"634"},{"messageId":"629","fix":"637","desc":"631"},{"messageId":"632","fix":"638","desc":"634"},{"messageId":"629","fix":"639","desc":"631"},{"messageId":"632","fix":"640","desc":"634"},{"messageId":"629","fix":"641","desc":"631"},{"messageId":"632","fix":"642","desc":"634"},{"messageId":"629","fix":"643","desc":"631"},{"messageId":"632","fix":"644","desc":"634"},{"messageId":"629","fix":"645","desc":"631"},{"messageId":"632","fix":"646","desc":"634"},{"messageId":"629","fix":"647","desc":"631"},{"messageId":"632","fix":"648","desc":"634"},{"messageId":"629","fix":"649","desc":"631"},{"messageId":"632","fix":"650","desc":"634"},{"messageId":"629","fix":"651","desc":"631"},{"messageId":"632","fix":"652","desc":"634"},{"messageId":"629","fix":"653","desc":"631"},{"messageId":"632","fix":"654","desc":"634"},{"messageId":"629","fix":"655","desc":"631"},{"messageId":"632","fix":"656","desc":"634"},{"messageId":"629","fix":"657","desc":"631"},{"messageId":"632","fix":"658","desc":"634"},"removeEscape",{"range":"659","text":"660"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"661","text":"662"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"663","text":"660"},{"range":"664","text":"662"},{"range":"665","text":"660"},{"range":"666","text":"662"},{"range":"667","text":"660"},{"range":"668","text":"662"},{"range":"669","text":"660"},{"range":"670","text":"662"},{"range":"671","text":"660"},{"range":"672","text":"662"},{"range":"673","text":"660"},{"range":"674","text":"662"},{"range":"675","text":"660"},{"range":"676","text":"662"},{"range":"677","text":"660"},{"range":"678","text":"662"},{"range":"679","text":"660"},{"range":"680","text":"662"},{"range":"681","text":"660"},{"range":"682","text":"662"},{"range":"683","text":"660"},{"range":"684","text":"662"},{"range":"685","text":"660"},{"range":"686","text":"662"},[50,51],"",[50,50],"\\",[52,53],[52,52],[60,61],[60,60],[66,67],[66,66],[74,75],[74,74],[76,77],[76,76],[84,85],[84,84],[101,102],[101,101],[113,114],[113,113],[125,126],[125,125],[137,138],[137,137],[161,162],[161,161],[168,169],[168,168]]