{"ast":null,"code":"var _jsxFileName = \"/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/AdminForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { IonAlert, IonButton, IonCol, IonGrid, IonInput, IonItem, IonLabel, IonRow } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AdminForm = props => {\n  _s();\n\n  const {\n    adminId,\n    name,\n    surname,\n    cellNum,\n    password\n  } = props.content;\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const updateName = name => {\n    setEnteredName(name);\n  };\n\n  const updateSurname = surname => {\n    setEnteredSurname(surname);\n  };\n\n  const updateCellNum = cellNum => {\n    setEnteredCellNum(cellNum);\n  };\n\n  const updatePassword = password => {\n    setEnteredPassword(password);\n  };\n\n  const updateConfirmPassword = confirmPassword => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  let path = useHistory();\n\n  if (props.buttonName === \"Update\") {} else {}\n\n  const buttonHandler = () => {\n    validateForm();\n\n    if (isFormValid === true) {\n      setShowLoader(true);\n\n      if (props.buttonName === \"Update\") {\n        let url = \"update\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapUpdateResponse(response);\n        });\n        console.log(payload);\n      } else if (props.buttonName === \"Delete\") {\n        let path = \"remove\";\n        console.log(path);\n      } else {\n        let url = \"signUp\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapPostResponse(response);\n        });\n        console.log(payload);\n        console.log(path);\n      }\n    }\n  };\n\n  const mapUpdateResponse = response => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      path.push(\"/dashboard\");\n    }\n  };\n\n  const mapPostResponse = response => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      path.push(\"/signIn\");\n    }\n  };\n\n  const validateForm = () => {\n    if (enteredName === '' || enteredSurname === '' || enteredCellNum === '' || enteredPassword === '') {\n      setErrorMessage(\"Fields must not be left empty!\");\n      setIsFormValid(false);\n    } else {\n      setIsFormValid(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(IonGrid, {\n    children: [/*#__PURE__*/_jsxDEV(IonAlert, {\n      isOpen: showError,\n      onDidDismiss: () => setShowError(false),\n      header: 'Error',\n      message: errorMessage,\n      buttons: ['OK']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonRow, {\n      children: /*#__PURE__*/_jsxDEV(IonCol, {\n        children: /*#__PURE__*/_jsxDEV(IonItem, {\n          children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredName,\n            onIonChange: e => updateName(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonRow, {\n      children: /*#__PURE__*/_jsxDEV(IonCol, {\n        children: /*#__PURE__*/_jsxDEV(IonItem, {\n          children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: \"Surname\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredSurname,\n            onIonChange: e => updateSurname(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonRow, {\n      children: /*#__PURE__*/_jsxDEV(IonCol, {\n        children: /*#__PURE__*/_jsxDEV(IonItem, {\n          children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: \"Cell Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredCellNum,\n            onIonChange: e => updateCellNum(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonRow, {\n      children: /*#__PURE__*/_jsxDEV(IonCol, {\n        children: /*#__PURE__*/_jsxDEV(IonItem, {\n          children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n            type: \"password\",\n            value: enteredPassword,\n            onIonChange: e => updatePassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonRow, {\n      children: /*#__PURE__*/_jsxDEV(IonCol, {\n        children: /*#__PURE__*/_jsxDEV(IonItem, {\n          children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: \"Confrim Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n            type: \"password\",\n            value: confirmPassword,\n            onIonChange: e => updateConfirmPassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonRow, {\n      children: /*#__PURE__*/_jsxDEV(IonCol, {\n        children: /*#__PURE__*/_jsxDEV(IonButton, {\n          type: \"submit\",\n          expand: \"block\",\n          onClick: buttonHandler,\n          children: props.buttonName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminForm, \"nnGl7hop9oa4lclS9EZE4jz/59E=\", false, function () {\n  return [useHistory];\n});\n\n_c = AdminForm;\nexport default AdminForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminForm\");","map":{"version":3,"sources":["/Users/onceknownriley/Dev/Ionic-React/admin/src/components/Forms/AdminForm.tsx"],"names":["IonAlert","IonButton","IonCol","IonGrid","IonInput","IonItem","IonLabel","IonRow","React","useState","useHistory","Connection","AdminForm","props","adminId","name","surname","cellNum","password","content","showLoader","setShowLoader","showError","setShowError","errorMessage","setErrorMessage","isFormValid","setIsFormValid","enteredName","setEnteredName","enteredSurname","setEnteredSurname","enteredCellNum","setEnteredCellNum","enteredPassword","setEnteredPassword","confirmPassword","setConfirmPassword","updateName","updateSurname","updateCellNum","updatePassword","updateConfirmPassword","path","buttonName","buttonHandler","validateForm","url","payload","processPostRequest","response","mapUpdateResponse","console","log","mapPostResponse","type","data","push","e","detail","value"],"mappings":";;;AAAA,SACEA,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,OANF,EAOEC,QAPF,EAQEC,MARF,QASO,cATP;AAUA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAUA,MAAMC,SAA0D,GAAIC,KAAD,IAAW;AAAA;;AAC1E,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA;AAAlC,MAA8CL,KAAK,CAACM,OAA1D;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAACM,IAAD,CAA9C;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsCtB,QAAQ,CAACO,OAAD,CAApD;AACA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCxB,QAAQ,CAACQ,OAAD,CAApD;AACA,QAAM,CAACiB,eAAD,EAAkBC,kBAAlB,IAAwC1B,QAAQ,CAACS,QAAD,CAAtD;AACA,QAAM,CAACkB,eAAD,EAAkBC,kBAAlB,IAAwC5B,QAAQ,CAAC,EAAD,CAAtD;;AAEA,QAAM6B,UAAU,GAAIvB,IAAD,IAAe;AAACc,IAAAA,cAAc,CAACd,IAAD,CAAd;AAAqB,GAAxD;;AACA,QAAMwB,aAAa,GAAIvB,OAAD,IAAkB;AAACe,IAAAA,iBAAiB,CAACf,OAAD,CAAjB;AAA2B,GAApE;;AACA,QAAMwB,aAAa,GAAIvB,OAAD,IAAkB;AAACgB,IAAAA,iBAAiB,CAAChB,OAAD,CAAjB;AAA2B,GAApE;;AACA,QAAMwB,cAAc,GAAIvB,QAAD,IAAmB;AAACiB,IAAAA,kBAAkB,CAACjB,QAAD,CAAlB;AAA6B,GAAxE;;AACA,QAAMwB,qBAAqB,GAAIN,eAAD,IAA0B;AAACC,IAAAA,kBAAkB,CAACD,eAAD,CAAlB;AAAoC,GAA7F;;AAEA,MAAIO,IAAI,GAAGjC,UAAU,EAArB;;AAEA,MAAIG,KAAK,CAAC+B,UAAN,KAAqB,QAAzB,EAAkC,CAEjC,CAFD,MAGI,CAEH;;AAED,QAAMC,aAAa,GAAG,MAAM;AAC1BC,IAAAA,YAAY;;AACZ,QAAGpB,WAAW,KAAK,IAAnB,EAAwB;AACxBL,MAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,UAAIR,KAAK,CAAC+B,UAAN,KAAqB,QAAzB,EAAkC;AAChC,YAAIG,GAAG,GAAG,QAAV;AAEA,YAAIC,OAAc,GAAG;AACnBlC,UAAAA,OAAO,EAAEA,OADU;AAEnBC,UAAAA,IAAI,EAAEa,WAFa;AAGnBZ,UAAAA,OAAO,EAAEc,cAHU;AAInBb,UAAAA,OAAO,EAAEe,cAJU;AAKnBd,UAAAA,QAAQ,EAAEgB;AALS,SAArB;AAOAvB,QAAAA,UAAU,CAACsC,kBAAX,CAA8BD,OAA9B,EAAuCD,GAAvC,EAA6CG,QAAD,IAAkB;AAC5DC,UAAAA,iBAAiB,CAACD,QAAD,CAAjB;AACD,SAFD;AAGAE,QAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACH,OAdC,MAeG,IAAGnC,KAAK,CAAC+B,UAAN,KAAqB,QAAxB,EAAiC;AAClC,YAAID,IAAI,GAAG,QAAX;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACH,OAHI,MAID;AACF,YAAII,GAAG,GAAG,QAAV;AACA,YAAIC,OAAc,GAAG;AACnBlC,UAAAA,OAAO,EAAEA,OADU;AAEnBC,UAAAA,IAAI,EAAEa,WAFa;AAGnBZ,UAAAA,OAAO,EAAEc,cAHU;AAInBb,UAAAA,OAAO,EAAEe,cAJU;AAKnBd,UAAAA,QAAQ,EAAEgB;AALS,SAArB;AAQAvB,QAAAA,UAAU,CAACsC,kBAAX,CAA8BD,OAA9B,EAAuCD,GAAvC,EAA6CG,QAAD,IAAkB;AAC5DI,UAAAA,eAAe,CAACJ,QAAD,CAAf;AACD,SAFD;AAGAE,QAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACD;AACF;AACF,GAxCG;;AA0CA,QAAMQ,iBAAiB,GAAID,QAAD,IAAkB;AAC1C,QAAIA,QAAQ,CAACK,IAAT,KAAkB,OAAtB,EAA+B;AAC7BlC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,MAAAA,eAAe,CAACyB,QAAQ,CAACM,IAAV,CAAf;AACAjC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAJD,MAIO;AACLF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAsB,MAAAA,IAAI,CAACc,IAAL,CAAU,YAAV;AACD;AACF,GATD;;AAWA,QAAMH,eAAe,GAAIJ,QAAD,IAAkB;AACxC,QAAIA,QAAQ,CAACK,IAAT,KAAkB,OAAtB,EAA+B;AAC7BlC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,MAAAA,eAAe,CAACyB,QAAQ,CAACM,IAAV,CAAf;AACAjC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAJD,MAIO;AACLF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAsB,MAAAA,IAAI,CAACc,IAAL,CAAU,SAAV;AACD;AACF,GATD;;AAWA,QAAMX,YAAY,GAAG,MAAM;AACzB,QAAGlB,WAAW,KAAK,EAAhB,IAAsBE,cAAc,KAAK,EAAzC,IAA+CE,cAAc,KAAK,EAAlE,IAAwEE,eAAe,KAAK,EAA/F,EAAkG;AAChGT,MAAAA,eAAe,CAAC,gCAAD,CAAf;AACAE,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAHD,MAII;AACFA,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GARD;;AASF,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,QAAD;AACI,MAAA,MAAM,EAAEL,SADZ;AAEI,MAAA,YAAY,EAAE,MAAMC,YAAY,CAAC,KAAD,CAFpC;AAGI,MAAA,MAAM,EAAE,OAHZ;AAII,MAAA,OAAO,EAAEC,YAJb;AAKI,MAAA,OAAO,EAAE,CAAC,IAAD;AALb;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAA,+BACE,QAAC,OAAD;AAAA,kCACE,QAAC,QAAD;AAAU,YAAA,QAAQ,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAC,MAAf;AAAsB,YAAA,KAAK,EAAEI,WAA7B;AAA0C,YAAA,WAAW,EAAE8B,CAAC,IAAIpB,UAAU,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV;AAAtE;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF,eAgBE,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAA,+BACE,QAAC,OAAD;AAAA,kCACE,QAAC,QAAD;AAAU,YAAA,QAAQ,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAC,MAAf;AAAsB,YAAA,KAAK,EAAE9B,cAA7B;AAA6C,YAAA,WAAW,EAAE4B,CAAC,IAAInB,aAAa,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV;AAA5E;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAhBF,eAwBE,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAA,+BACE,QAAC,OAAD;AAAA,kCACE,QAAC,QAAD;AAAU,YAAA,QAAQ,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAC,MAAf;AAAsB,YAAA,KAAK,EAAE5B,cAA7B;AAA6C,YAAA,WAAW,EAAE0B,CAAC,IAAIlB,aAAa,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV;AAA5E;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxBF,eAgCE,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAA,+BACE,QAAC,OAAD;AAAA,kCACE,QAAC,QAAD;AAAU,YAAA,QAAQ,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAC,UAAf;AAA0B,YAAA,KAAK,EAAE1B,eAAjC;AAAkD,YAAA,WAAW,EAAEwB,CAAC,IAAIjB,cAAc,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV;AAAlF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAhCF,eAwCE,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAA,+BACE,QAAC,OAAD;AAAA,kCACE,QAAC,QAAD;AAAU,YAAA,QAAQ,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAC,UAAf;AAA0B,YAAA,KAAK,EAAExB,eAAjC;AAAkD,YAAA,WAAW,EAAEsB,CAAC,IAAIhB,qBAAqB,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV;AAAzF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxCF,eAgDE,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,IAAI,EAAC,QAAhB;AAAyB,UAAA,MAAM,EAAC,OAAhC;AAAwC,UAAA,OAAO,EAAEf,aAAjD;AAAA,oBACGhC,KAAK,CAAC+B;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAhDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0DD,CAhKD;;GAAMhC,S;UAoBSF,U;;;KApBTE,S;AAkKN,eAAeA,SAAf","sourcesContent":["import {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonRow,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\n\ninterface Admin{\n    adminId: string;\n    name: string;\n    surname: string;\n    cellNum: string;\n    password: string;\n}\n\nconst AdminForm: React.FC<{ buttonName: string, content: Admin}> = (props) => {\n    const {adminId, name, surname, cellNum, password} = props.content;\n\n    const [showLoader, setShowLoader] = useState(false);\n    const [showError, setShowError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [isFormValid, setIsFormValid] = useState(false);\n\n    const [enteredName, setEnteredName] = useState(name);\n    const [enteredSurname, setEnteredSurname] = useState(surname);\n    const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n    const [enteredPassword, setEnteredPassword] = useState(password);\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const updateName = (name: any) => {setEnteredName(name)};\n    const updateSurname = (surname: any) => {setEnteredSurname(surname)};\n    const updateCellNum = (cellNum: any) => {setEnteredCellNum(cellNum)};\n    const updatePassword = (password: any) => {setEnteredPassword(password)};\n    const updateConfirmPassword = (confirmPassword: any) => {setConfirmPassword(confirmPassword)};\n\n    let path = useHistory();\n\n    if (props.buttonName === \"Update\"){\n        \n    }\n    else{\n        \n    }\n\n    const buttonHandler = () => {\n      validateForm();\n      if(isFormValid === true){\n      setShowLoader(true);\n      if (props.buttonName === \"Update\"){\n        let url = \"update\";\n\n        let payload: Admin = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          password: enteredPassword\n        }\n        Connection.processPostRequest(payload, url, (response: any) =>{\n          mapUpdateResponse(response);\n        })\n        console.log(payload);\n    }\n    else if(props.buttonName === \"Delete\"){\n        let path = \"remove\";\n        console.log(path);\n    }\n    else{\n      let url = \"signUp\";\n      let payload: Admin = {\n        adminId: adminId,\n        name: enteredName,\n        surname: enteredSurname,\n        cellNum: enteredCellNum,\n        password: enteredPassword\n      }\n\n      Connection.processPostRequest(payload, url, (response: any) =>{\n        mapPostResponse(response);\n      })\n      console.log(payload);\n      console.log(path);\n    }\n  }\n};\n\n    const mapUpdateResponse = (response: any) =>{\n      if (response.type === \"error\") {\n        setShowLoader(false);\n        setErrorMessage(response.data);\n        setShowError(true);\n      } else {\n        setShowLoader(false);\n        path.push(\"/dashboard\");\n      }\n    }\n\n    const mapPostResponse = (response: any) =>{\n      if (response.type === \"error\") {\n        setShowLoader(false);\n        setErrorMessage(response.data);\n        setShowError(true);\n      } else {\n        setShowLoader(false);\n        path.push(\"/signIn\");\n      }\n    };\n\n    const validateForm = () => {\n      if(enteredName === '' || enteredSurname === '' || enteredCellNum === '' || enteredPassword === ''){\n        setErrorMessage(\"Fields must not be left empty!\");\n        setIsFormValid(false);\n      }\n      else{\n        setIsFormValid(true);\n      }\n    };\n  return (\n    <IonGrid>\n      <IonAlert\n          isOpen={showError}\n          onDidDismiss={() => setShowError(false)}\n          header={'Error'}\n          message={errorMessage}\n          buttons={['OK']}\n        />\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Name</IonLabel>\n            <IonInput type=\"text\" value={enteredName} onIonChange={e => updateName(e.detail.value)}/>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Surname</IonLabel>\n            <IonInput type=\"text\" value={enteredSurname} onIonChange={e => updateSurname(e.detail.value)}/>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Cell Number</IonLabel>\n            <IonInput type=\"text\" value={enteredCellNum} onIonChange={e => updateCellNum(e.detail.value)}/>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Password</IonLabel>\n            <IonInput type=\"password\" value={enteredPassword} onIonChange={e => updatePassword(e.detail.value)}/>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem>\n            <IonLabel position=\"floating\">Confrim Password</IonLabel>\n            <IonInput type=\"password\" value={confirmPassword} onIonChange={e => updateConfirmPassword(e.detail.value)}/>\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton type=\"submit\" expand=\"block\" onClick={buttonHandler}>\n            {props.buttonName}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default AdminForm;\n"]},"metadata":{},"sourceType":"module"}