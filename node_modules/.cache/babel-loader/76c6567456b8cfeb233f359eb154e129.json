{"ast":null,"code":"var _jsxFileName = \"/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/CardDetails/CardDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { IonBackButton, IonButtons, IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport MultiForm from \"../../components/MultiForm/MultiForm\";\nimport InputControls from \"../../components/InputControls/InputControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardDetails = () => {\n  _s();\n\n  const [selectedSegment, setSelectedSegment] = useState(\"Update\");\n  const [isDisabled, setIsDisabled] = useState(false);\n  const {\n    name,\n    type,\n    back\n  } = useParams();\n\n  const selectedSegmentHandler = selectedValue => {\n    setSelectedSegment(selectedValue);\n\n    if (selectedValue == \"Delete\") {\n      setIsDisabled(true);\n    } else {\n      setIsDisabled(false);\n    }\n  };\n\n  let result;\n  const url = \"/page/\";\n\n  if (type === \"agent\") {\n    /* Gotten from the API*/\n    const agent = {\n      complexName: \"J&J\",\n      contractId: \"\",\n      name: \"\",\n      surname: \"\",\n      id: \"\",\n      cellNum: \"\",\n      street1: \"\",\n      street2: \"\",\n      city: \"\",\n      province: \"\",\n      postalCode: \"\",\n      password: \"\"\n    };\n    result = agent;\n  }\n\n  return /*#__PURE__*/_jsxDEV(IonPage, {\n    children: [/*#__PURE__*/_jsxDEV(IonHeader, {\n      children: /*#__PURE__*/_jsxDEV(IonToolbar, {\n        children: [/*#__PURE__*/_jsxDEV(IonButtons, {\n          slot: \"start\",\n          children: /*#__PURE__*/_jsxDEV(IonBackButton, {\n            defaultHref: url.concat(back).concat(\"/\").concat(type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IonTitle, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonContent, {\n      children: [/*#__PURE__*/_jsxDEV(InputControls, {\n        selectedValue: selectedSegment,\n        onSelectedValue: selectedSegmentHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MultiForm, {\n        buttonName: selectedSegment,\n        type: type,\n        isDisabled: isDisabled,\n        content: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardDetails, \"ksGsOfrJPRt+iKWhmnrb9kDl8vc=\", false, function () {\n  return [useParams];\n});\n\n_c = CardDetails;\nexport default CardDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardDetails\");","map":{"version":3,"sources":["/Users/onceknownriley/Dev/Ionic-React/admin/src/pages/CardDetails/CardDetails.tsx"],"names":["IonBackButton","IonButtons","IonContent","IonHeader","IonPage","IonTitle","IonToolbar","React","useState","useParams","MultiForm","InputControls","CardDetails","selectedSegment","setSelectedSegment","isDisabled","setIsDisabled","name","type","back","selectedSegmentHandler","selectedValue","result","url","agent","complexName","contractId","surname","id","cellNum","street1","street2","city","province","postalCode","password","concat"],"mappings":";;;AAAA,SACEA,aADF,EAEEC,UAFF,EAIEC,UAJF,EAMEC,SANF,EAUEC,OAVF,EAYEC,QAZF,EAaEC,UAbF,QAcO,cAdP;AAeA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,aAAP,MAA0B,8CAA1B;;;AAiBA,MAAMC,WAAqB,GAAG,MAAM;AAAA;;AAClC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CACpD,QADoD,CAAtD;AAGA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAe,KAAf,CAA5C;AAEA,QAAM;AAAES,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,MACJV,SAAS,EADX;;AAOA,QAAMW,sBAAsB,GAAIC,aAAD,IAAwC;AACrEP,IAAAA,kBAAkB,CAACO,aAAD,CAAlB;;AACA,QAAIA,aAAa,IAAI,QAArB,EAA+B;AAC7BL,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFD,MAEO;AACLA,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAPD;;AASA,MAAIM,MAAJ;AAEA,QAAMC,GAAG,GAAG,QAAZ;;AAEA,MAAIL,IAAI,KAAK,OAAb,EAAsB;AACpB;AACA,UAAMM,KAAY,GAAG;AACnBC,MAAAA,WAAW,EAAE,KADM;AAEnBC,MAAAA,UAAU,EAAE,EAFO;AAGnBT,MAAAA,IAAI,EAAE,EAHa;AAInBU,MAAAA,OAAO,EAAE,EAJU;AAKnBC,MAAAA,EAAE,EAAE,EALe;AAMnBC,MAAAA,OAAO,EAAE,EANU;AAOnBC,MAAAA,OAAO,EAAE,EAPU;AAQnBC,MAAAA,OAAO,EAAE,EARU;AASnBC,MAAAA,IAAI,EAAE,EATa;AAUnBC,MAAAA,QAAQ,EAAE,EAVS;AAWnBC,MAAAA,UAAU,EAAE,EAXO;AAYnBC,MAAAA,QAAQ,EAAE;AAZS,KAArB;AAeAb,IAAAA,MAAM,GAAGE,KAAT;AACD;;AAED,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,SAAD;AAAA,6BACE,QAAC,UAAD;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAC,OAAjB;AAAA,iCACE,QAAC,aAAD;AACE,YAAA,WAAW,EAAED,GAAG,CAACa,MAAJ,CAAWjB,IAAX,EAAiBiB,MAAjB,CAAwB,GAAxB,EAA6BA,MAA7B,CAAoClB,IAApC;AADf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,QAAD;AAAA,oBAAWD;AAAX;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,UAAD;AAAA,8BACE,QAAC,aAAD;AACE,QAAA,aAAa,EAAEJ,eADjB;AAEE,QAAA,eAAe,EAAEO;AAFnB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,SAAD;AACE,QAAA,UAAU,EAAEP,eADd;AAEE,QAAA,IAAI,EAAEK,IAFR;AAGE,QAAA,UAAU,EAAEH,UAHd;AAIE,QAAA,OAAO,EAAEO;AAJX;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAxED;;GAAMV,W;UAOFH,S;;;KAPEG,W;AA0EN,eAAeA,WAAf","sourcesContent":["import {\n  IonBackButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport MultiForm from \"../../components/MultiForm/MultiForm\";\nimport InputControls from \"../../components/InputControls/InputControls\";\n\ninterface Agent {\n  complexName: string;\n  contractId: string;\n  name: string;\n  surname: string;\n  id: string;\n  cellNum: string;\n  street1: string;\n  street2: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  password: string;\n}\n\nconst CardDetails: React.FC = () => {\n  const [selectedSegment, setSelectedSegment] = useState<\"Update\" | \"Delete\">(\n    \"Update\"\n  );\n  const [isDisabled, setIsDisabled] = useState<true | false>(false);\n\n  const { name, type, back } =\n    useParams<{\n      name: string;\n      type: \"agent\" | \"complex\" | \"package\" | \"promotion\";\n      back: string;\n    }>();\n\n  const selectedSegmentHandler = (selectedValue: \"Update\" | \"Delete\") => {\n    setSelectedSegment(selectedValue);\n    if (selectedValue == \"Delete\") {\n      setIsDisabled(true);\n    } else {\n      setIsDisabled(false);\n    }\n  };\n\n  let result;\n\n  const url = \"/page/\";\n\n  if (type === \"agent\") {\n    /* Gotten from the API*/\n    const agent: Agent = {\n      complexName: \"J&J\",\n      contractId: \"\",\n      name: \"\",\n      surname: \"\",\n      id: \"\",\n      cellNum: \"\",\n      street1: \"\",\n      street2: \"\",\n      city: \"\",\n      province: \"\",\n      postalCode: \"\",\n      password: \"\",\n    };\n\n    result = agent;\n  }\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonButtons slot=\"start\">\n            <IonBackButton\n              defaultHref={url.concat(back).concat(\"/\").concat(type)}\n            />\n          </IonButtons>\n          <IonTitle>{name}</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <InputControls\n          selectedValue={selectedSegment}\n          onSelectedValue={selectedSegmentHandler}\n        />\n        <MultiForm\n          buttonName={selectedSegment}\n          type={type}\n          isDisabled={isDisabled}\n          content={result}\n        />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default CardDetails;\n"]},"metadata":{},"sourceType":"module"}