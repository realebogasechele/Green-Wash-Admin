{"ast":null,"code":"var _jsxFileName = \"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/Otp.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport { IonAlert, IonButton, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonContent, IonHeader, IonInput, IonItem, IonLabel, IonLoading, IonPage, IonTitle, IonToolbar } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { validOtp } from \"../../components/Regex/Regex\";\nimport Connection from \"../../mixins/Connection\";\nimport { jsxDEV as _jsxDEV } from \"theme-ui/jsx-dev-runtime\";\n\nconst Otp = () => {\n  _s();\n\n  const path = useHistory();\n  const [otp, setOtp] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const updateOtp = otp => setOtp(otp.target.value);\n\n  const getId = async id => {\n    id = await Storage.get({\n      key: 'id'\n    });\n  };\n\n  const setAdminId = async data => {\n    await Storage.set({\n      key: 'adminId',\n      value: data\n    });\n  };\n\n  const buttonHandler = () => {\n    if (otp === '') {\n      setShowLoader(false);\n      setErrorMessage(\"Please enter One-Time Pin.\");\n      setShowError(true);\n    } else if (!validOtp.test(otp)) {\n      setShowLoader(false);\n      setErrorMessage(\"Invalid One-Time Pin.\");\n      setShowError(true);\n    } else {\n      let date = new Date();\n      let time = date.toISOString();\n      let id = ''; //getId(id);\n\n      let url = 'forgot/verifyOtp/'.concat(otp, '/', time, '/', '0616995568');\n      Connection.processPostRequest({}, url, response => mapResponse(response));\n    }\n  };\n\n  const mapResponse = response => {\n    if (response.type === 'error') {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setAdminId(response.data.data);\n      setShowLoader(false);\n      path.push('/forgot/newPassword');\n    }\n  };\n\n  return _jsxDEV(IonPage, {\n    children: [_jsxDEV(IonLoading, {\n      cssClass: \"my-custom-class\",\n      showBackdrop: true,\n      isOpen: showLoader,\n      message: \"Please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showError,\n      onDidDismiss: () => setShowError(false),\n      header: \"Error\",\n      subHeader: \"Something went wrong.\",\n      message: errorMessage,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), _jsxDEV(IonHeader, {\n      children: _jsxDEV(IonToolbar, {\n        color: \"primary\",\n        children: _jsxDEV(IonTitle, {\n          children: \"One-Time Pin Validation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), _jsxDEV(IonContent, {\n      children: _jsxDEV(IonCard, {\n        sx: styles.card,\n        children: [_jsxDEV(IonCardHeader, {\n          children: _jsxDEV(IonCardSubtitle, {\n            children: \"Please Enter the One-Time Pin sent to your phone:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), _jsxDEV(IonCardContent, {\n          children: [_jsxDEV(IonItem, {\n            sx: styles.input,\n            children: [_jsxDEV(IonLabel, {\n              position: \"floating\",\n              children: \"One-Time Pin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this), _jsxDEV(IonInput, {\n              type: \"text\",\n              onIonChange: e => updateOtp(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }, this), _jsxDEV(IonButton, {\n            type: \"submit\",\n            shape: \"round\",\n            expand: \"block\",\n            onClick: buttonHandler,\n            children: \"Verify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Otp, \"tyLx06DdiyrLjZi35qyKxwzQlvg=\", false, function () {\n  return [useHistory];\n});\n\n_c = Otp;\nexport default Otp;\nconst styles = {\n  input: {\n    mb: '4'\n  },\n  card: {\n    mt: '28vh'\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Otp\");","map":{"version":3,"sources":["/Users/onceknownriley/Documents/GreenWashProject/Admin/src/pages/ForgotPassword/Otp.tsx"],"names":["Storage","IonAlert","IonButton","IonCard","IonCardContent","IonCardHeader","IonCardSubtitle","IonContent","IonHeader","IonInput","IonItem","IonLabel","IonLoading","IonPage","IonTitle","IonToolbar","React","useState","useHistory","validOtp","Connection","Otp","path","otp","setOtp","errorMessage","setErrorMessage","showError","setShowError","showLoader","setShowLoader","updateOtp","target","value","getId","id","get","key","setAdminId","data","set","buttonHandler","test","date","Date","time","toISOString","url","concat","processPostRequest","response","mapResponse","type","push","styles","card","input","e","mb","mt"],"mappings":"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","sourcesContent":["/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport { IonAlert, IonBackButton, IonButton, IonButtons, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCol, IonContent, IonGrid, IonHeader, IonInput, IonItem, IonLabel, IonLoading, IonPage, IonRow, IonTitle, IonToolbar } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { validOtp } from \"../../components/Regex/Regex\";\nimport Connection from \"../../mixins/Connection\";\n\nconst Otp: React.FC = () => {\n    const path = useHistory(); \n  const [otp, setOtp] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const updateOtp = (otp: any) => setOtp(otp.target.value);\n\n  const getId = async (id: any) => {\n    id = await Storage.get({\n      key: 'id',\n    });\n  };\n  const setAdminId = async (data: any) => {\n    await Storage.set({\n      key: 'adminId',\n      value: data,\n    });\n  };\n\n  const buttonHandler = () => {\n      if(otp === ''){\n          setShowLoader(false);\n          setErrorMessage(\"Please enter One-Time Pin.\");\n          setShowError(true);\n      }else if(!validOtp.test(otp)){\n          setShowLoader(false);\n          setErrorMessage(\"Invalid One-Time Pin.\");\n          setShowError(true);\n      }else{\n        let date = new Date();\n        let time = date.toISOString();\n        let id = '';\n        //getId(id);\n        let url = 'forgot/verifyOtp/'.concat(otp, '/', time, '/', '0616995568')\n          Connection.processPostRequest({}, url, (response: any) => mapResponse(response))\n      }\n  };\n\n  const mapResponse = (response: any) => {\n    if(response.type === 'error'){\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    }else{\n      setAdminId(response.data.data);\n      setShowLoader(false);\n      path.push('/forgot/newPassword');\n    }\n  };\n\n  return (\n    <IonPage>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonHeader>\n        <IonToolbar color=\"primary\">\n          <IonTitle>One-Time Pin Validation</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n          <IonCard sx={styles.card}>\n              <IonCardHeader>\n                  <IonCardSubtitle>Please Enter the One-Time Pin sent to your phone:</IonCardSubtitle>\n              </IonCardHeader>\n              <IonCardContent>\n                  <IonItem sx={styles.input}>\n                  <IonLabel position='floating'>One-Time Pin</IonLabel>\n                  <IonInput type='text' onIonChange={(e) => updateOtp(e)}/>\n                  </IonItem>\n                  <IonButton type='submit' shape='round' expand='block' onClick={buttonHandler}>Verify</IonButton>\n              </IonCardContent>\n          </IonCard>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Otp;\n\nconst styles = {\n    input:{\n        mb: '4',\n    },\n\n    card:{\n        mt: '28vh'\n    },\n};"]},"metadata":{},"sourceType":"module"}