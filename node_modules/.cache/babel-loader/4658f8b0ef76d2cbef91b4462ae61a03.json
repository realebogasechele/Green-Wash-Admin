{"ast":null,"code":"var _jsxFileName = \"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource theme-ui */\nimport { IonAlert, IonButton, IonCol, IonGrid, IonInput, IonItem, IonLabel, IonLoading, IonRow } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\nimport { validCellNum, validPassword, validName } from \"../Regex/Regex\";\nimport { jsxDEV as _jsxDEV } from \"theme-ui/jsx-dev-runtime\";\n\nconst AdminForm = props => {\n  _s();\n\n  const {\n    adminId,\n    name,\n    surname,\n    cellNum,\n    password\n  } = props.content;\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredEmail, setEnteredEmail] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const updateName = name => {\n    display.name = 'none';\n    setEnteredName(name);\n    console.log(display.name);\n  };\n\n  const updateSurname = surname => {\n    setEnteredSurname(surname);\n  };\n\n  const updateCellNum = cellNum => {\n    setEnteredCellNum(cellNum);\n  };\n\n  const updateEmail = email => {\n    setEnteredCellNum(email);\n  };\n\n  const updatePassword = password => {\n    setEnteredPassword(password);\n  };\n\n  const updateConfirmPassword = confirmPassword => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  let path = useHistory();\n\n  if (props.buttonName === \"Update\") {} else {}\n\n  const buttonHandler = () => {\n    validateForm();\n\n    if (isFormValid === true) {\n      if (props.buttonName === \"Update\") {\n        let url = \"update\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapUpdateResponse(response);\n        });\n      } else if (props.buttonName === \"Delete\") {\n        setShowLoader(false);\n        let path = \"remove/\";\n        console.log(path);\n      } else {\n        let url = \"signUp\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapPostResponse(response);\n        });\n      }\n    }\n  };\n\n  const mapUpdateResponse = response => {\n    setShowLoader(false);\n\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Profile Updated!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const mapPostResponse = response => {\n    setShowLoader(false);\n\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Details Successfully Captured!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const validateForm = () => {\n    if (enteredName === \"\" || enteredSurname === \"\" || enteredCellNum === \"\" || enteredPassword === \"\") {\n      setShowLoader(false);\n      setErrorMessage(\"Fields must not be left empty.\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else if (enteredPassword !== confirmPassword) {\n      setShowLoader(false);\n      setErrorMessage(\"Passwords do not match. Please ensure they are entered correctly!\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else {\n      if (!validName.test(enteredName)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Name.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validName.test(enteredSurname)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Surname.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validCellNum.test(enteredCellNum)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validPassword.test(enteredPassword)) {\n        setShowLoader(false);\n        setErrorMessage(\"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else {\n        setIsFormValid(true);\n      }\n    }\n  };\n\n  return _jsxDEV(IonGrid, {\n    children: [_jsxDEV(IonLoading, {\n      cssClass: \"my-custom-class\",\n      showBackdrop: true,\n      isOpen: showLoader,\n      message: \"Please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showError,\n      onDidDismiss: () => setShowError(false),\n      header: \"Error\",\n      subHeader: \"Something went wrong.\",\n      message: errorMessage,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showSuccess,\n      onDidDismiss: () => path.push(\"/signIn\"),\n      header: \"Success\",\n      subHeader: successMessage,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Name  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.name,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredName,\n            onIonChange: e => updateName(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Surname  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.surname,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredSurname,\n            onIonChange: e => updateSurname(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Cell Number  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.cellNum,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredCellNum,\n            onIonChange: e => updateCellNum(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Email \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.email,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredCellNum,\n            onIonChange: e => updateEmail(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Password  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.pass,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"password\",\n            value: enteredPassword,\n            onIonChange: e => updatePassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Confrim Password  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.confirm,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 61\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"password\",\n            value: confirmPassword,\n            onIonChange: e => updateConfirmPassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonButton, {\n          shape: \"round\",\n          type: \"submit\",\n          expand: \"block\",\n          onClick: buttonHandler,\n          children: props.buttonName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminForm, \"1o3ZGVdiMQ6MV598dRjAKuyIUv0=\", false, function () {\n  return [useHistory];\n});\n\n_c = AdminForm;\nexport default AdminForm;\nvar display = {\n  name: 'none',\n  surname: 'inline-block',\n  cellNum: 'inline-block',\n  email: 'inline-block',\n  pass: 'inline-block',\n  confirm: 'inline-block'\n};\nconst styles = {\n  arterisk: {\n    name: {\n      display: display.name,\n      color: 'red'\n    },\n    surname: {\n      display: display.surname,\n      color: 'red'\n    },\n    cellNum: {\n      display: display.cellNum,\n      color: 'red'\n    },\n    email: {\n      display: display.email,\n      color: 'red'\n    },\n    pass: {\n      display: display.pass,\n      color: 'red'\n    },\n    confirm: {\n      display: display.confirm,\n      color: 'red'\n    }\n  },\n  item: {\n    mb: '2vh'\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminForm\");","map":{"version":3,"sources":["/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx"],"names":["IonAlert","IonButton","IonCol","IonGrid","IonInput","IonItem","IonLabel","IonLoading","IonRow","React","useState","useHistory","Connection","validCellNum","validPassword","validName","AdminForm","props","adminId","name","surname","cellNum","password","content","showLoader","setShowLoader","showError","setShowError","errorMessage","setErrorMessage","successMessage","setSuccessMessage","showSuccess","setShowSuccess","isFormValid","setIsFormValid","enteredName","setEnteredName","enteredSurname","setEnteredSurname","enteredCellNum","setEnteredCellNum","enteredEmail","setEnteredEmail","enteredPassword","setEnteredPassword","confirmPassword","setConfirmPassword","updateName","display","console","log","updateSurname","updateCellNum","updateEmail","email","updatePassword","updateConfirmPassword","path","buttonName","buttonHandler","validateForm","url","payload","processPostRequest","response","mapUpdateResponse","mapPostResponse","type","data","test","push","styles","item","arterisk","e","detail","value","pass","confirm","color","mb"],"mappings":"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","sourcesContent":["/** @jsxImportSource theme-ui */\nimport {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\n\nimport { validCellNum, validPassword, validName } from \"../Regex/Regex\";\n\ninterface Admin {\n  adminId: string;\n  name: string;\n  surname: string;\n  cellNum: string;\n  password: string;\n}\n\nconst AdminForm: React.FC<{ buttonName: string; content: Admin }> = (props) => {\n  const { adminId, name, surname, cellNum, password } = props.content;\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredEmail, setEnteredEmail] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const updateName = (name: any) => {\n    display.name = 'none';\n    setEnteredName(name);\n    console.log(display.name);\n  };\n  const updateSurname = (surname: any) => {\n    setEnteredSurname(surname);\n  };\n  const updateCellNum = (cellNum: any) => {\n    setEnteredCellNum(cellNum);\n  };\n  const updateEmail = (email: any) => {\n    setEnteredCellNum(email);\n  };\n  const updatePassword = (password: any) => {\n    setEnteredPassword(password);\n  };\n  const updateConfirmPassword = (confirmPassword: any) => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  let path = useHistory();\n\n  if (props.buttonName === \"Update\") {\n  } else {\n  }\n\n  const buttonHandler = () => {\n    validateForm();\n    if (isFormValid === true) {\n      if (props.buttonName === \"Update\") {\n        let url = \"update\";\n\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword,\n        };\n        Connection.processPostRequest(payload, url, (response: any) => {\n          mapUpdateResponse(response);\n        });\n\n      } else if (props.buttonName === \"Delete\") {\n        setShowLoader(false);\n        let path = \"remove/\";\n        console.log(path);\n      } else {\n        let url = \"signUp\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword,\n        };\n\n        Connection.processPostRequest(payload, url, (response: any) => {\n          mapPostResponse(response);\n        });\n      }\n    }\n  };\n\n  const mapUpdateResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Profile Updated!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const mapPostResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Details Successfully Captured!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const validateForm = () => {\n    if (\n      enteredName === \"\" ||\n      enteredSurname === \"\" ||\n      enteredCellNum === \"\" ||\n      enteredPassword === \"\"\n    ) {\n      setShowLoader(false);\n      setErrorMessage(\"Fields must not be left empty.\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else if (enteredPassword !== confirmPassword) {\n      setShowLoader(false);\n      setErrorMessage(\n        \"Passwords do not match. Please ensure they are entered correctly!\"\n      );\n      setShowError(true);\n      setIsFormValid(false);\n    } else {\n      if (!validName.test(enteredName)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Name.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validName.test(enteredSurname)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Surname.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validCellNum.test(enteredCellNum)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validPassword.test(enteredPassword)) {\n        setShowLoader(false);\n        setErrorMessage(\n          \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n        );\n        setShowError(true);\n        setIsFormValid(false);\n      } else {\n        setIsFormValid(true);\n      }\n    }\n  };\n  return (\n    <IonGrid >\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={\n         showSuccess\n        }\n        onDidDismiss={\n            () => path.push(\"/signIn\")\n        }\n        header={\"Success\"}\n        subHeader={successMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Name  <span sx={styles.arterisk.name}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredName}\n              onIonChange={(e) => updateName(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Surname  <span sx={styles.arterisk.surname}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredSurname}\n              onIonChange={(e) => updateSurname(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Cell Number  <span sx={styles.arterisk.cellNum}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredCellNum}\n              onIonChange={(e) => updateCellNum(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Email <span sx={styles.arterisk.email}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredCellNum}\n              onIonChange={(e) => updateEmail(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Password  <span sx={styles.arterisk.pass}>*</span></IonLabel>\n            <IonInput\n              type=\"password\"\n              value={enteredPassword}\n              onIonChange={(e) => updatePassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Confrim Password  <span sx={styles.arterisk.confirm}>*</span></IonLabel>\n            <IonInput\n              type=\"password\"\n              value={confirmPassword}\n              onIonChange={(e) => updateConfirmPassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton\n            shape=\"round\"\n            type=\"submit\"\n            expand=\"block\"\n            onClick={buttonHandler}\n          >\n            {props.buttonName}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default AdminForm;\nvar display = {\n  name: 'none',\n  surname: 'inline-block',\n  cellNum: 'inline-block',\n  email: 'inline-block',\n  pass: 'inline-block',\n  confirm: 'inline-block',\n}\n\nconst styles = {\n  arterisk:{\n    name:{\n      display: display.name,\n      color: 'red',\n    },\n    surname:{\n      display: display.surname,\n      color: 'red',\n    },\n    cellNum:{\n      display: display.cellNum,\n      color: 'red',\n    },\n    email:{\n      display: display.email,\n      color: 'red',\n    },\n    pass:{\n      display: display.pass,\n      color: 'red',\n    },\n    confirm:{\n      display: display.confirm,\n      color: 'red',\n    },\n  },\n  item:{\n    mb:'2vh'\n  },\n};"]},"metadata":{},"sourceType":"module"}