{"ast":null,"code":"var _jsxFileName = \"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport { IonAlert, IonButton, IonCol, IonGrid, IonInput, IonItem, IonLabel, IonLoading, IonRow, useIonViewWillEnter } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\nimport { validCellNum, validPassword, validName } from \"../Regex/Regex\";\nimport { jsxDEV as _jsxDEV } from \"theme-ui/jsx-dev-runtime\";\n\nconst AdminForm = props => {\n  _s();\n\n  const {\n    adminId,\n    name,\n    surname,\n    cellNum,\n    password\n  } = props.content;\n  useIonViewWillEnter(() => {\n    if (props.buttonName === \"Update\") {\n      setShowLoader(true);\n      getAdminId();\n    }\n  });\n  const [admin, setAdmin] = useState({\n    adminId: \"\",\n    name: \"\",\n    surname: \"\",\n    cellNum: \"\",\n    email: \"\",\n    password: \"\"\n  });\n\n  const getAdminId = async () => {\n    const id = await Storage.get({\n      key: 'adminId'\n    });\n    const adminId = id.value;\n    console.log(adminId);\n    getAdminDetails(adminId);\n  };\n\n  const getAdminDetails = adminId => {\n    let url = 'get/'.concat(adminId);\n    Connection.processGetRequest({}, url, response => {\n      mapResponse(response);\n    });\n  };\n\n  const mapResponse = async response => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setAdmin(response.data.data);\n      console.log(admin);\n      setEnteredName(admin.name);\n      setEnteredSurname(admin.surname);\n      setEnteredCellNum(admin.cellNum);\n      setEnteredEmail(admin.email);\n      setShowLoader(false);\n      console.log(admin);\n    }\n  };\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredEmail, setEnteredEmail] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const updateName = name => {\n    setEnteredName(name);\n    console.log(display.name);\n  };\n\n  const updateSurname = surname => {\n    setEnteredSurname(surname);\n  };\n\n  const updateCellNum = cellNum => {\n    setEnteredCellNum(cellNum);\n  };\n\n  const updateEmail = email => {\n    setEnteredEmail(email);\n  };\n\n  const updatePassword = password => {\n    setEnteredPassword(password);\n  };\n\n  const updateConfirmPassword = confirmPassword => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  let path = useHistory();\n\n  const buttonHandler = () => {\n    validateForm();\n\n    if (isFormValid === true) {\n      if (props.buttonName === \"Update\") {\n        let url = \"update\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapUpdateResponse(response);\n        });\n      } else if (props.buttonName === \"Delete\") {\n        setShowLoader(false);\n        let path = \"remove/\";\n        console.log(path);\n      } else {\n        let url = \"signUp\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapPostResponse(response);\n        });\n      }\n    }\n  };\n\n  const mapUpdateResponse = response => {\n    setShowLoader(false);\n\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Profile Updated!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const mapPostResponse = response => {\n    setShowLoader(false);\n\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Details Successfully Captured!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const validateForm = () => {\n    if (enteredName === \"\" || enteredSurname === \"\" || enteredCellNum === \"\" || enteredPassword === \"\") {\n      setShowLoader(false);\n      setErrorMessage(\"Fields must not be left empty.\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else if (enteredPassword !== confirmPassword) {\n      setShowLoader(false);\n      setErrorMessage(\"Passwords do not match. Please ensure they are entered correctly!\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else {\n      if (!validName.test(enteredName)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Name.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validName.test(enteredSurname)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Surname.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validCellNum.test(enteredCellNum)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validPassword.test(enteredPassword)) {\n        setShowLoader(false);\n        setErrorMessage(\"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else {\n        setIsFormValid(true);\n      }\n    }\n  };\n\n  return _jsxDEV(IonGrid, {\n    children: [_jsxDEV(IonLoading, {\n      cssClass: \"my-custom-class\",\n      showBackdrop: true,\n      isOpen: showLoader,\n      message: \"Please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showError,\n      onDidDismiss: () => setShowError(false),\n      header: \"Error\",\n      subHeader: \"Something went wrong.\",\n      message: errorMessage,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showSuccess,\n      onDidDismiss: () => path.push(\"/signIn\"),\n      header: \"Success\",\n      subHeader: successMessage,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Name  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.name,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredName,\n            disabled: props.isDisabled,\n            onIonChange: e => updateName(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Surname  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.surname,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredSurname,\n            disabled: props.isDisabled,\n            onIonChange: e => updateSurname(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Cell Number  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.cellNum,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredCellNum,\n            disabled: props.isDisabled,\n            onIonChange: e => updateCellNum(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Email \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.email,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredCellNum,\n            disabled: props.isDisabled,\n            onIonChange: e => updateEmail(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Password  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.pass,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"password\",\n            value: enteredPassword,\n            disabled: props.isDisabled,\n            onIonChange: e => updatePassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Confrim Password  \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.confirm,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 61\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"password\",\n            value: confirmPassword,\n            disabled: props.isDisabled,\n            onIonChange: e => updateConfirmPassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonButton, {\n          shape: \"round\",\n          type: \"submit\",\n          expand: \"block\",\n          onClick: buttonHandler,\n          children: props.buttonName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminForm, \"WSJDwr1omPUKs7amjqD1ZnITUTk=\", false, function () {\n  return [useIonViewWillEnter, useHistory];\n});\n\n_c = AdminForm;\nexport default AdminForm;\nvar display = {\n  name: 'inline-block',\n  surname: 'inline-block',\n  cellNum: 'inline-block',\n  email: 'inline-block',\n  pass: 'inline-block',\n  confirm: 'inline-block'\n};\nconst styles = {\n  arterisk: {\n    name: {\n      display: display.name,\n      color: 'red'\n    },\n    surname: {\n      display: display.surname,\n      color: 'red'\n    },\n    cellNum: {\n      display: display.cellNum,\n      color: 'red'\n    },\n    email: {\n      display: display.email,\n      color: 'red'\n    },\n    pass: {\n      display: display.pass,\n      color: 'red'\n    },\n    confirm: {\n      display: display.confirm,\n      color: 'red'\n    }\n  },\n  item: {\n    mb: '2vh'\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminForm\");","map":{"version":3,"sources":["/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx"],"names":["Storage","IonAlert","IonButton","IonCol","IonGrid","IonInput","IonItem","IonLabel","IonLoading","IonRow","useIonViewWillEnter","React","useState","useHistory","Connection","validCellNum","validPassword","validName","AdminForm","props","adminId","name","surname","cellNum","password","content","buttonName","setShowLoader","getAdminId","admin","setAdmin","email","id","get","key","value","console","log","getAdminDetails","url","concat","processGetRequest","response","mapResponse","type","setErrorMessage","data","setShowError","setEnteredName","setEnteredSurname","setEnteredCellNum","setEnteredEmail","showLoader","showError","errorMessage","successMessage","setSuccessMessage","showSuccess","setShowSuccess","isFormValid","setIsFormValid","enteredName","enteredSurname","enteredCellNum","enteredEmail","enteredPassword","setEnteredPassword","confirmPassword","setConfirmPassword","updateName","display","updateSurname","updateCellNum","updateEmail","updatePassword","updateConfirmPassword","path","buttonHandler","validateForm","payload","processPostRequest","mapUpdateResponse","mapPostResponse","test","push","styles","item","arterisk","isDisabled","e","detail","pass","confirm","color","mb"],"mappings":"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","sourcesContent":["/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\n\nimport { validCellNum, validPassword, validName } from \"../Regex/Regex\";\n\ninterface Admin {\n  adminId: string;\n  name: string;\n  surname: string;\n  cellNum: string;\n  password: string;\n}\n\nconst AdminForm: React.FC<{ buttonName: string; content: Admin; isDisabled: boolean}> = (props) => {\n  const { adminId, name, surname, cellNum, password } = props.content;\n\n  useIonViewWillEnter(()=>{\n    if(props.buttonName === \"Update\"){\n      setShowLoader(true);\n      getAdminId();\n    }\n  })\n\n  const [admin, setAdmin] = useState({\n    adminId: \"\",\n    name: \"\",\n    surname: \"\",\n    cellNum: \"\",\n    email: \"\",\n    password: \"\"\n  }); \n\n  const getAdminId = async() => {\n    const id: any = await Storage.get({key: 'adminId'});\n    const adminId = id.value;\n    console.log(adminId)\n\n    getAdminDetails(adminId);\n  };\n\n  const getAdminDetails = (adminId: string) => {\n    let url = 'get/'.concat(adminId);\n    Connection.processGetRequest({}, url, (response: any)=>{\n      mapResponse(response);\n    })\n  };\n  const mapResponse = async(response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setAdmin(response.data.data);\n      console.log(admin);\n      setEnteredName(admin.name);\n      setEnteredSurname(admin.surname);\n      setEnteredCellNum(admin.cellNum);\n      setEnteredEmail(admin.email);\n      setShowLoader(false);\n      console.log(admin);\n    }\n  };\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredEmail, setEnteredEmail] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const updateName = (name: any) => {\n    setEnteredName(name);\n    console.log(display.name);\n  };\n  const updateSurname = (surname: any) => {\n    setEnteredSurname(surname);\n  };\n  const updateCellNum = (cellNum: any) => {\n    setEnteredCellNum(cellNum);\n  };\n  const updateEmail = (email: any) => {\n    setEnteredEmail(email);\n  };\n  const updatePassword = (password: any) => {\n    setEnteredPassword(password);\n  };\n  const updateConfirmPassword = (confirmPassword: any) => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  let path = useHistory();\n\n  const buttonHandler = () => {\n    validateForm();\n    if (isFormValid === true) {\n      if (props.buttonName === \"Update\") {\n        let url = \"update\";\n\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword,\n        };\n        Connection.processPostRequest(payload, url, (response: any) => {\n          mapUpdateResponse(response);\n        });\n\n      } else if (props.buttonName === \"Delete\") {\n        setShowLoader(false);\n        let path = \"remove/\";\n        console.log(path);\n      } else {\n        let url = \"signUp\";\n        let payload = {\n          adminId: adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword,\n        };\n\n        Connection.processPostRequest(payload, url, (response: any) => {\n          mapPostResponse(response);\n        });\n      }\n    }\n  };\n\n  const mapUpdateResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Profile Updated!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const mapPostResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setErrorMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setSuccessMessage(\"Details Successfully Captured!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const validateForm = () => {\n    if (\n      enteredName === \"\" ||\n      enteredSurname === \"\" ||\n      enteredCellNum === \"\" ||\n      enteredPassword === \"\"\n    ) {\n      setShowLoader(false);\n      setErrorMessage(\"Fields must not be left empty.\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else if (enteredPassword !== confirmPassword) {\n      setShowLoader(false);\n      setErrorMessage(\n        \"Passwords do not match. Please ensure they are entered correctly!\"\n      );\n      setShowError(true);\n      setIsFormValid(false);\n    } else {\n      if (!validName.test(enteredName)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Name.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validName.test(enteredSurname)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Surname.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validCellNum.test(enteredCellNum)) {\n        setShowLoader(false);\n        setErrorMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validPassword.test(enteredPassword)) {\n        setShowLoader(false);\n        setErrorMessage(\n          \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n        );\n        setShowError(true);\n        setIsFormValid(false);\n      } else {\n        setIsFormValid(true);\n      }\n    }\n  };\n  return (\n    <IonGrid >\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={errorMessage}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={\n         showSuccess\n        }\n        onDidDismiss={\n            () => path.push(\"/signIn\")\n        }\n        header={\"Success\"}\n        subHeader={successMessage}\n        buttons={[\"OK\"]}\n      />\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Name  <span sx={styles.arterisk.name}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredName}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateName(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Surname  <span sx={styles.arterisk.surname}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredSurname}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateSurname(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Cell Number  <span sx={styles.arterisk.cellNum}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredCellNum}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateCellNum(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Email <span sx={styles.arterisk.email}>*</span></IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredCellNum}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateEmail(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Password  <span sx={styles.arterisk.pass}>*</span></IonLabel>\n            <IonInput\n              type=\"password\"\n              value={enteredPassword}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updatePassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">Confrim Password  <span sx={styles.arterisk.confirm}>*</span></IonLabel>\n            <IonInput\n              type=\"password\"\n              value={confirmPassword}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateConfirmPassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton\n            shape=\"round\"\n            type=\"submit\"\n            expand=\"block\"\n            onClick={buttonHandler}\n          >\n            {props.buttonName}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default AdminForm;\nvar display = {\n  name: 'inline-block',\n  surname: 'inline-block',\n  cellNum: 'inline-block',\n  email: 'inline-block',\n  pass: 'inline-block',\n  confirm: 'inline-block',\n}\n\nconst styles = {\n  arterisk:{\n    name:{\n      display: display.name,\n      color: 'red',\n    },\n    surname:{\n      display: display.surname,\n      color: 'red',\n    },\n    cellNum:{\n      display: display.cellNum,\n      color: 'red',\n    },\n    email:{\n      display: display.email,\n      color: 'red',\n    },\n    pass:{\n      display: display.pass,\n      color: 'red',\n    },\n    confirm:{\n      display: display.confirm,\n      color: 'red',\n    },\n  },\n  item:{\n    mb:'2vh'\n  },\n};"]},"metadata":{},"sourceType":"module"}