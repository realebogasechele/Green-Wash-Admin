{"ast":null,"code":"var _jsxFileName = \"/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport { IonAlert, IonButton, IonCol, IonGrid, IonInput, IonItem, IonLabel, IonLoading, IonRow, useIonViewWillEnter } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Connection from \"../../mixins/Connection\";\nimport { validCellNum, validPassword, validName } from \"../Regex/Regex\";\nimport { jsxDEV as _jsxDEV } from \"theme-ui/jsx-dev-runtime\";\n\nconst AdminForm = props => {\n  _s();\n\n  const {\n    adminId,\n    name,\n    surname,\n    cellNum,\n    password\n  } = props.content;\n  useIonViewWillEnter(() => {\n    if (props.buttonName === \"Update\") {\n      setShowLoader(true);\n      getAdminId();\n    }\n  });\n  let admin = {\n    adminId: \"\",\n    name: \"\",\n    surname: \"\",\n    cellNum: \"\",\n    email: \"\",\n    password: \"\"\n  };\n\n  const getAdminId = async () => {\n    const id = await Storage.get({\n      key: \"adminId\"\n    });\n    const adminId = id.value;\n    getAdminDetails(adminId);\n  };\n\n  const getAdminDetails = adminId => {\n    let url = \"get/\".concat(adminId);\n    Connection.processGetRequest({}, url, response => {\n      mapResponse(response);\n    });\n  };\n\n  const updateAdmin = response => {\n    admin = response;\n  };\n\n  const mapResponse = response => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      updateAdmin(response.data.data);\n      updateName(admin.name);\n      updateSurname(admin.surname);\n      updateCellNum(admin.cellNum);\n      updateEmail(admin.email);\n      setShowLoader(false);\n    }\n  };\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showSuccessUpdate, setShowSuccessUpdate] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredEmail, setEnteredEmail] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const updateName = name => {\n    setEnteredName(name);\n  };\n\n  const updateSurname = surname => {\n    setEnteredSurname(surname);\n  };\n\n  const updateCellNum = cellNum => {\n    setEnteredCellNum(cellNum);\n  };\n\n  const updateEmail = email => {\n    setEnteredEmail(email);\n  };\n\n  const updatePassword = password => {\n    setEnteredPassword(password);\n  };\n\n  const updateConfirmPassword = confirmPassword => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  const getId = async () => {\n    const id = await Storage.get({\n      key: 'adminId'\n    });\n    const adminId = id.value;\n    return adminId;\n  };\n\n  let path = useHistory();\n\n  const buttonHandler = () => {\n    validateForm();\n\n    if (isFormValid === true) {\n      if (props.buttonName === \"Update\") {\n        getId();\n        let url = \"update\";\n        let payload = {\n          adminId: admin.adminId,\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapUpdateResponse(response);\n        });\n      } else if (props.buttonName === \"Delete\") {\n        setShowLoader(false);\n        let path = \"remove/\";\n        console.log(path);\n      } else {\n        let url = \"signUp\";\n        let payload = {\n          adminId: getId(),\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword\n        };\n        Connection.processPostRequest(payload, url, response => {\n          mapPostResponse(response);\n        });\n      }\n    }\n  };\n\n  const mapUpdateResponse = response => {\n    setShowLoader(false);\n\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setMessage(\"Profile Updated!\");\n      setShowSuccessUpdate(true);\n    }\n  };\n\n  const mapPostResponse = response => {\n    setShowLoader(false);\n\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setMessage(\"Details Successfully Captured!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const validateForm = () => {\n    if (enteredName === \"\" || enteredSurname === \"\" || enteredCellNum === \"\" || enteredPassword === \"\") {\n      setShowLoader(false);\n      setMessage(\"Fields must not be left empty.\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else if (enteredPassword !== confirmPassword) {\n      setShowLoader(false);\n      setMessage(\"Passwords do not match. Please ensure they are entered correctly!\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else {\n      if (!validName.test(enteredName)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Name.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validName.test(enteredSurname)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Surname.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validCellNum.test(enteredCellNum)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validPassword.test(enteredPassword)) {\n        setShowLoader(false);\n        setMessage(\"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else {\n        setIsFormValid(true);\n      }\n    }\n  };\n\n  return _jsxDEV(IonGrid, {\n    children: [_jsxDEV(IonLoading, {\n      cssClass: \"my-custom-class\",\n      showBackdrop: true,\n      isOpen: showLoader,\n      message: \"Please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showError,\n      onDidDismiss: () => setShowError(false),\n      header: \"Error\",\n      subHeader: \"Something went wrong.\",\n      message: message,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showSuccess,\n      onDidDismiss: () => path.push(\"/signIn\"),\n      header: \"Success\",\n      subHeader: message,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), _jsxDEV(IonAlert, {\n      isOpen: showSuccessUpdate,\n      onDidDismiss: () => path.push(\"/dashboard\"),\n      header: \"Success\",\n      subHeader: message,\n      buttons: [\"OK\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Name \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.name,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredName,\n            disabled: props.isDisabled,\n            onIonChange: e => updateName(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Surname \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.surname,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredSurname,\n            disabled: props.isDisabled,\n            onIonChange: e => updateSurname(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Cell Number \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.cellNum,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredCellNum,\n            disabled: props.isDisabled,\n            onIonChange: e => updateCellNum(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Email \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.email,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"text\",\n            value: enteredEmail,\n            disabled: props.isDisabled,\n            onIonChange: e => updateEmail(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Password \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.pass,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"password\",\n            value: enteredPassword,\n            disabled: props.isDisabled,\n            onIonChange: e => updatePassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonItem, {\n          sx: styles.item,\n          children: [_jsxDEV(IonLabel, {\n            position: \"floating\",\n            children: [\"Confrim Password \", _jsxDEV(\"span\", {\n              sx: styles.arterisk.confirm,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), _jsxDEV(IonInput, {\n            type: \"password\",\n            value: confirmPassword,\n            disabled: props.isDisabled,\n            onIonChange: e => updateConfirmPassword(e.detail.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), _jsxDEV(IonRow, {\n      children: _jsxDEV(IonCol, {\n        children: _jsxDEV(IonButton, {\n          shape: \"round\",\n          type: \"submit\",\n          expand: \"block\",\n          onClick: buttonHandler,\n          children: props.buttonName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminForm, \"iQetEWgAm4OZUMpKlC7tK3zAce4=\", false, function () {\n  return [useIonViewWillEnter, useHistory];\n});\n\n_c = AdminForm;\nexport default AdminForm;\nvar display = {\n  name: \"inline-block\",\n  surname: \"inline-block\",\n  cellNum: \"inline-block\",\n  email: \"inline-block\",\n  pass: \"inline-block\",\n  confirm: \"inline-block\"\n};\nconst styles = {\n  arterisk: {\n    name: {\n      display: display.name,\n      color: \"red\"\n    },\n    surname: {\n      display: display.surname,\n      color: \"red\"\n    },\n    cellNum: {\n      display: display.cellNum,\n      color: \"red\"\n    },\n    email: {\n      display: display.email,\n      color: \"red\"\n    },\n    pass: {\n      display: display.pass,\n      color: \"red\"\n    },\n    confirm: {\n      display: display.confirm,\n      color: \"red\"\n    }\n  },\n  item: {\n    mb: \"2vh\"\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminForm\");","map":{"version":3,"sources":["/Users/onceknownriley/Documents/GreenWashProject/Admin/src/components/Forms/AdminForm.tsx"],"names":["Storage","IonAlert","IonButton","IonCol","IonGrid","IonInput","IonItem","IonLabel","IonLoading","IonRow","useIonViewWillEnter","React","useState","useHistory","Connection","validCellNum","validPassword","validName","AdminForm","props","adminId","name","surname","cellNum","password","content","buttonName","setShowLoader","getAdminId","admin","email","id","get","key","value","getAdminDetails","url","concat","processGetRequest","response","mapResponse","updateAdmin","type","setMessage","data","setShowError","updateName","updateSurname","updateCellNum","updateEmail","showLoader","showError","message","showSuccessUpdate","setShowSuccessUpdate","showSuccess","setShowSuccess","showConfirm","setShowConfirm","isFormValid","setIsFormValid","enteredName","setEnteredName","enteredSurname","setEnteredSurname","enteredCellNum","setEnteredCellNum","enteredEmail","setEnteredEmail","enteredPassword","setEnteredPassword","confirmPassword","setConfirmPassword","updatePassword","updateConfirmPassword","getId","path","buttonHandler","validateForm","payload","processPostRequest","mapUpdateResponse","console","log","mapPostResponse","test","push","styles","item","arterisk","isDisabled","e","detail","pass","confirm","display","color","mb"],"mappings":"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","sourcesContent":["/** @jsxImportSource theme-ui */\nimport { Storage } from \"@capacitor/storage\";\nimport {\n  IonAlert,\n  IonButton,\n  IonCol,\n  IonGrid,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonLoading,\n  IonRow,\n  useIonViewWillEnter,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { finished } from \"stream\";\nimport Connection from \"../../mixins/Connection\";\n\nimport { validCellNum, validPassword, validName } from \"../Regex/Regex\";\n\ninterface Admin {\n  adminId: string;\n  name: string;\n  surname: string;\n  cellNum: string;\n  password: string;\n}\n\nconst AdminForm: React.FC<{\n  buttonName: string;\n  content: Admin;\n  isDisabled: boolean;\n}> = (props) => {\n  const { adminId, name, surname, cellNum, password } = props.content;\n\n  useIonViewWillEnter(() => {\n    if (props.buttonName === \"Update\") {\n      setShowLoader(true);\n      getAdminId();\n    }\n  });\n\n  let admin = {\n    adminId: \"\",\n    name: \"\",\n    surname: \"\",\n    cellNum: \"\",\n    email: \"\",\n    password: \"\",\n  };\n\n  const getAdminId = async () => {\n    const id: any = await Storage.get({ key: \"adminId\" });\n    const adminId = id.value;\n\n    getAdminDetails(adminId);\n  };\n\n  const getAdminDetails = (adminId: string) => {\n    let url = \"get/\".concat(adminId);\n    Connection.processGetRequest({}, url, (response: any) => {\n      mapResponse(response);\n    });\n  };\n  const updateAdmin = (response: any) => {\n    admin = response;\n  };\n\n  const mapResponse = (response: any) => {\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      updateAdmin(response.data.data);\n      updateName(admin.name);\n      updateSurname(admin.surname);\n      updateCellNum(admin.cellNum);\n      updateEmail(admin.email);\n      setShowLoader(false);\n    }\n  };\n\n  const [showLoader, setShowLoader] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showSuccessUpdate, setShowSuccessUpdate] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [enteredName, setEnteredName] = useState(name);\n  const [enteredSurname, setEnteredSurname] = useState(surname);\n  const [enteredCellNum, setEnteredCellNum] = useState(cellNum);\n  const [enteredEmail, setEnteredEmail] = useState(cellNum);\n  const [enteredPassword, setEnteredPassword] = useState(password);\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const updateName = (name: any) => {\n    setEnteredName(name);\n  };\n  const updateSurname = (surname: any) => {\n    setEnteredSurname(surname);\n  };\n  const updateCellNum = (cellNum: any) => {\n    setEnteredCellNum(cellNum);\n  };\n  const updateEmail = (email: any) => {\n    setEnteredEmail(email);\n  };\n  const updatePassword = (password: any) => {\n    setEnteredPassword(password);\n  };\n  const updateConfirmPassword = (confirmPassword: any) => {\n    setConfirmPassword(confirmPassword);\n  };\n\n  const getId = async() => {\n    const id: any = await Storage.get({key: 'adminId'});\n    const adminId = id.value;\n    return adminId;\n  };\n\n  let path = useHistory();\n\n  const buttonHandler = () => {\n    validateForm();\n    if (isFormValid === true) {\n      if (props.buttonName === \"Update\") {\n        getId()\n          let url = \"update\";\n          let payload = {\n            adminId: admin.adminId,\n            name: enteredName,\n            surname: enteredSurname,\n            cellNum: enteredCellNum,\n            email: enteredEmail,\n            password: enteredPassword,\n          };\n          Connection.processPostRequest(payload, url, (response: any) => {\n            mapUpdateResponse(response);\n          });\n      } else if (props.buttonName === \"Delete\") {\n        setShowLoader(false);\n        let path = \"remove/\";\n        console.log(path);\n      } else {\n        let url = \"signUp\";\n        let payload = {\n          adminId: getId(),\n          name: enteredName,\n          surname: enteredSurname,\n          cellNum: enteredCellNum,\n          email: enteredEmail,\n          password: enteredPassword,\n        };\n\n        Connection.processPostRequest(payload, url, (response: any) => {\n          mapPostResponse(response);\n        });\n      }\n    }\n  };\n\n  const mapUpdateResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setMessage(\"Profile Updated!\");\n      setShowSuccessUpdate(true);\n    }\n  };\n\n  const mapPostResponse = (response: any) => {\n    setShowLoader(false);\n    if (response.type === \"error\") {\n      setShowLoader(false);\n      setMessage(response.data);\n      setShowError(true);\n    } else {\n      setShowLoader(false);\n      setMessage(\"Details Successfully Captured!\");\n      setShowSuccess(true);\n    }\n  };\n\n  const validateForm = () => {\n    if (\n      enteredName === \"\" ||\n      enteredSurname === \"\" ||\n      enteredCellNum === \"\" ||\n      enteredPassword === \"\"\n    ) {\n      setShowLoader(false);\n      setMessage(\"Fields must not be left empty.\");\n      setShowError(true);\n      setIsFormValid(false);\n    } else if (enteredPassword !== confirmPassword) {\n      setShowLoader(false);\n      setMessage(\n        \"Passwords do not match. Please ensure they are entered correctly!\"\n      );\n      setShowError(true);\n      setIsFormValid(false);\n    } else {\n      if (!validName.test(enteredName)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Name.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validName.test(enteredSurname)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Surname.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validCellNum.test(enteredCellNum)) {\n        setShowLoader(false);\n        setMessage(\"Invalid Cell Number.\");\n        setShowError(true);\n        setIsFormValid(false);\n      } else if (!validPassword.test(enteredPassword)) {\n        setShowLoader(false);\n        setMessage(\n          \"Password must be 8-16 characters long. Ensure it includes atleast 1 aphabet character and 1 digit.\"\n        );\n        setShowError(true);\n        setIsFormValid(false);\n      } else {\n        setIsFormValid(true);\n      }\n    }\n  };\n\n  return (\n    <IonGrid>\n      <IonLoading\n        cssClass=\"my-custom-class\"\n        showBackdrop\n        isOpen={showLoader}\n        message={\"Please wait...\"}\n      />\n\n      <IonAlert\n        isOpen={showError}\n        onDidDismiss={() => setShowError(false)}\n        header={\"Error\"}\n        subHeader={\"Something went wrong.\"}\n        message={message}\n        buttons={[\"OK\"]}\n      />\n\n      <IonAlert\n        isOpen={showSuccess}\n        onDidDismiss={() => path.push(\"/signIn\")}\n        header={\"Success\"}\n        subHeader={message}\n        buttons={[\"OK\"]}\n      />\n      <IonAlert\n        isOpen={showSuccessUpdate}\n        onDidDismiss={() => path.push(\"/dashboard\")}\n        header={\"Success\"}\n        subHeader={message}\n        buttons={[\"OK\"]}\n      />\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Name <span sx={styles.arterisk.name}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredName}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateName(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Surname <span sx={styles.arterisk.surname}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredSurname}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateSurname(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Cell Number <span sx={styles.arterisk.cellNum}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredCellNum}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateCellNum(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Email <span sx={styles.arterisk.email}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"text\"\n              value={enteredEmail}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateEmail(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Password <span sx={styles.arterisk.pass}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"password\"\n              value={enteredPassword}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updatePassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonItem sx={styles.item}>\n            <IonLabel position=\"floating\">\n              Confrim Password <span sx={styles.arterisk.confirm}>*</span>\n            </IonLabel>\n            <IonInput\n              type=\"password\"\n              value={confirmPassword}\n              disabled={props.isDisabled}\n              onIonChange={(e) => updateConfirmPassword(e.detail.value)}\n            />\n          </IonItem>\n        </IonCol>\n      </IonRow>\n      <IonRow>\n        <IonCol>\n          <IonButton\n            shape=\"round\"\n            type=\"submit\"\n            expand=\"block\"\n            onClick={buttonHandler}\n          >\n            {props.buttonName}\n          </IonButton>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n};\n\nexport default AdminForm;\nvar display = {\n  name: \"inline-block\",\n  surname: \"inline-block\",\n  cellNum: \"inline-block\",\n  email: \"inline-block\",\n  pass: \"inline-block\",\n  confirm: \"inline-block\",\n};\n\nconst styles = {\n  arterisk: {\n    name: {\n      display: display.name,\n      color: \"red\",\n    },\n    surname: {\n      display: display.surname,\n      color: \"red\",\n    },\n    cellNum: {\n      display: display.cellNum,\n      color: \"red\",\n    },\n    email: {\n      display: display.email,\n      color: \"red\",\n    },\n    pass: {\n      display: display.pass,\n      color: \"red\",\n    },\n    confirm: {\n      display: display.confirm,\n      color: \"red\",\n    },\n  },\n  item: {\n    mb: \"2vh\",\n  },\n};\n"]},"metadata":{},"sourceType":"module"}