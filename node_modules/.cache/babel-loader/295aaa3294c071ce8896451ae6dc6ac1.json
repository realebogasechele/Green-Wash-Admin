{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.group = 'CapacitorStorage';\n  }\n\n  async configure({\n    group\n  }) {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  async get(options) {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n    return {\n      value\n    };\n  }\n\n  async set(options) {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  async remove(options) {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  async keys() {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n    return {\n      keys\n    };\n  }\n\n  async clear() {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  async migrate() {\n    var _a;\n\n    const migrated = [];\n    const existing = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n      const {\n        value: currentValue\n      } = await this.get({\n        key\n      });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({\n          key,\n          value\n        });\n        migrated.push(key);\n      }\n    }\n\n    return {\n      migrated,\n      existing\n    };\n  }\n\n  async removeOld() {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  get impl() {\n    return window.localStorage;\n  }\n\n  get prefix() {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  rawKeys() {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  applyPrefix(key) {\n    return this.prefix + key;\n  }\n\n}","map":{"version":3,"sources":["../../src/web.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.group = 'CapacitorStorage';\n    }\n    async configure({ group }) {\n        if (typeof group === 'string') {\n            this.group = group;\n        }\n    }\n    async get(options) {\n        const value = this.impl.getItem(this.applyPrefix(options.key));\n        return { value };\n    }\n    async set(options) {\n        this.impl.setItem(this.applyPrefix(options.key), options.value);\n    }\n    async remove(options) {\n        this.impl.removeItem(this.applyPrefix(options.key));\n    }\n    async keys() {\n        const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n        return { keys };\n    }\n    async clear() {\n        for (const key of this.rawKeys()) {\n            this.impl.removeItem(key);\n        }\n    }\n    async migrate() {\n        var _a;\n        const migrated = [];\n        const existing = [];\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            const key = oldkey.substring(oldprefix.length);\n            const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n            const { value: currentValue } = await this.get({ key });\n            if (typeof currentValue === 'string') {\n                existing.push(key);\n            }\n            else {\n                await this.set({ key, value });\n                migrated.push(key);\n            }\n        }\n        return { migrated, existing };\n    }\n    async removeOld() {\n        const oldprefix = '_cap_';\n        const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n        for (const oldkey of keys) {\n            this.impl.removeItem(oldkey);\n        }\n    }\n    get impl() {\n        return window.localStorage;\n    }\n    get prefix() {\n        return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n    }\n    rawKeys() {\n        return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n    }\n    applyPrefix(key) {\n        return this.prefix + key;\n    }\n}\n//# sourceMappingURL=web.js.map"]},"metadata":{},"sourceType":"module"}